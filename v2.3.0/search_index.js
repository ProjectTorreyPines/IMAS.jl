var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Control","page":"API Reference","title":"Control","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.controller\nIMAS.pid_controller\nIMAS.controllers__linear_controller","category":"page"},{"location":"api/#IMAS.controller","page":"API Reference","title":"IMAS.controller","text":"controller(ct::IMAS.controllers, name::String)\n\nPick a controller based on its name, returns nothing if not found\n\nNOTE: for now only looks under dd.controllers.linear_controller\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.pid_controller","page":"API Reference","title":"IMAS.pid_controller","text":"pid_controller(controller::IMAS.controllers__linear_controller, kP::T, kI::T, kD::T) where {T<:Real}\n\nInitializes SISO PID controller\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.controllers__linear_controller","page":"API Reference","title":"IMASdd.controllers__linear_controller","text":"(controller::controllers__linear_controller{T})(setpoint::T, value::T, time0::Float64) where {T<:Real}\n\nOperates the linear controller\n\n\n\n\n\n","category":"type"},{"location":"api/#Extract","page":"API Reference","title":"Extract","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.extract","category":"page"},{"location":"api/#IMAS.extract","page":"API Reference","title":"IMAS.extract","text":"extract(dd::IMAS.dd, library::Symbol=:extract)\n\nlibrary can be one of:\n\n:extract => ExtractFunctionsLibrary\n:moopt => ConstraintFunctionsLibrary + ObjectiveFunctionsLibrary\n:all => ExtractFunctionsLibrary + ConstraintFunctionsLibrary + ObjectiveFunctionsLibrary\n\n\n\n\n\nextract(dd::IMAS.dd, xtract::AbstractDict{Symbol,<:ExtractFunction})\n\nExtract data from dd. Each of the ExtractFunction should accept dd as input, like this:\n\nxtract = IMAS.ExtractFunction[\n    :κ => ExtractFunction(:equilibrium, :κ, \"-\", dd -> dd.equilibrium.time_slice[].boundary.elongation)\n    :Te0 => ExtractFunction(:profiles, :Te0, \"keV\", dd -> dd.core_profiles.profiles_1d[].electrons.temperature[1] / 1E3)\n]\n\n\n\n\n\n","category":"function"},{"location":"api/#Functions-library","page":"API Reference","title":"Functions library","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.ConstraintFunction\nIMAS.ConstraintFunctionsLibrary\nIMAS.ObjectiveFunction\nIMAS.ObjectiveFunctionsLibrary\nIMAS.ExtractFunction\nIMAS.ExtractFunctionsLibrary","category":"page"},{"location":"api/#IMAS.ConstraintFunction","page":"API Reference","title":"IMAS.ConstraintFunction","text":"name::Symbol\nunits::String\nfunc::Function\noperation::Function\nlimit::Float64\ntolerance::Float64\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.ConstraintFunctionsLibrary","page":"API Reference","title":"IMAS.ConstraintFunctionsLibrary","text":"ConstraintFunctionsLibrary::OrderedCollections.OrderedDict{Symbol,ConstraintFunction}\n\nCollection of ConstraintFunction\n\nrequired_power_electric_net → == 0.0 ± 0.2 [%]\nmin_required_power_electric_net → > 0.0 [%]\nrequired_flattop → == 0.0 ± 0.01 [%]\nmin_required_flattop → > 0.0 [%]\nmin_required_B0 → > 0.0 [%]\nzero_ohmic → == 0.0 ± 0.1 [MA]\nmax_ne_peaking → < 0.0 [%]\nmin_lh_power_threshold → > 1.0 [%]\nmax_ωpe_ωce → < 1.0 [%]\nmax_qpol_omp → < 0.0 [%]\nmax_tf_j → < 1.0 [%]\nmax_oh_j → < 1.0 [%]\nmax_pl_stress → < 1.0 [%]\nmax_tf_stress → < 1.0 [%]\nmax_oh_stress → < 1.0 [%]\nmax_hds03 → < 0.0 [%]\nmin_q95 → > 0.0 [%]\nmax_βn → < 0.0 []\nmax_Psol_R → < 0.0 [%]\nmax_transport_error → < 0.1 []\n\n\n\n\n\n","category":"constant"},{"location":"api/#IMAS.ObjectiveFunction","page":"API Reference","title":"IMAS.ObjectiveFunction","text":"name::Symbol\nunits::String\nfunc::Function\ntarget::Float64\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.ObjectiveFunctionsLibrary","page":"API Reference","title":"IMAS.ObjectiveFunctionsLibrary","text":"ObjectiveFunctionsLibrary::OrderedCollections.OrderedDict{Symbol,ObjectiveFunction}\n\nCollection of ObjectiveFunction\n\nmin_levelized_CoE → -Inf [$/kWh]\nmin_log10_levelized_CoE → -Inf [log₁₀($/kW)]\nmin_capital_cost → -Inf [$B]\nmax_fusion → Inf [MW]\nmax_power_electric_net → Inf [MW]\nreq_power_electric_net → 0.0 [ΔMW]\nmax_flattop → Inf [hours]\nmax_q95 → Inf []\nreq_flattop → 0.0 [Δhours]\nmax_log10_flattop → Inf [log₁₀(hours)]\nmin_βn → -Inf []\nmin_R0 → -Inf [m]\nmax_zeff → Inf []\n\n\n\n\n\n","category":"constant"},{"location":"api/#IMAS.ExtractFunction","page":"API Reference","title":"IMAS.ExtractFunction","text":"group::Symbol\nname::Symbol\nunits::String\nfunc::Function\nerror::Union{Nothing,Exception}\nvalue::Any\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.ExtractFunctionsLibrary","page":"API Reference","title":"IMAS.ExtractFunctionsLibrary","text":"ExtractFunctionsLibrary::OrderedCollections.OrderedDict{Symbol,ExtractFunction}\n\nCollection of ExtractFunction\n\ngeometry.R0 → [m]\ngeometry.a → [m]\ngeometry.1/ϵ → [-]\ngeometry.κ → [-]\ngeometry.δ → [-]\ngeometry.ζ → [-]\ngeometry.Volume → [m³]\ngeometry.Surface → [m²]\nequilibrium.B0 → [T]\nequilibrium.ip → [MA]\nequilibrium.q95 → [-]\nequilibrium.<Bpol> → [T]\nequilibrium.βpol_MHD → [-]\nequilibrium.βtor_MHD → [-]\nequilibrium.βn_MHD → [-]\ntemperatures.Te0 → [keV]\ntemperatures.Ti0 → [keV]\ntemperatures.<Te> → [keV]\ntemperatures.<Ti> → [keV]\ntemperatures.Te0/<Te> → [-]\ntemperatures.Ti0/<Ti> → [-]\ndensities.ne0 → [m⁻³]\ndensities.ne_ped → [m⁻³]\ndensities.ne_line → [m⁻³]\ndensities.<ne> → [m⁻³]\ndensities.ne0/<ne> → [-]\ndensities.fGW → [-]\ndensities.zeff_ped → [-]\ndensities.<zeff> → [-]\ndensities.impurities → [-]\npressures.P0 → [MPa]\npressures.<P> → [MPa]\npressures.P0/<P> → [-]\npressures.βn → [-]\npressures.βn_th → [-]\ntransport.τe → [s]\ntransport.τe_exp → [s]\ntransport.H98y2 → [-]\ntransport.H98y2_exp → [-]\ntransport.Hds03 → [-]\ntransport.Hds03_exp → [-]\ntransport.τα_thermalization → [s]\ntransport.τα_slowing_down → [s]\nsources.Pec → [MW]\nsources.rho0_ec → [MW]\nsources.Pnbi → [MW]\nsources.Enbi1 → [MeV]\nsources.Pic → [MW]\nsources.Plh → [MW]\nsources.Paux_tot → [MW]\nsources.Pα → [MW]\nsources.Pohm → [MW]\nsources.Pheat → [MW]\nsources.Prad_tot → [MW]\nexhaust.Psol → [MW]\nexhaust.PLH → [MW]\nexhaust.Bpol_omp → [T]\nexhaust.λq → [mm]\nexhaust.qpol → [MW/m²]\nexhaust.qpar → [MW/m²]\nexhaust.P/R0 → [MW/m]\nexhaust.PB/R0 → [MW T/m]\nexhaust.PBp/R0 → [MW T/m]\nexhaust.PBϵ/R0q95 → [MW T/m]\nexhaust.neutrons_peak → [MW/m²]\ncurrents.ip_bs_aux_ohm → [MA]\ncurrents.ip_ni → [MA]\ncurrents.ip_bs → [MA]\ncurrents.ip_aux → [MA]\ncurrents.ip_ohm → [MA]\ncurrents.ejima → [-]\ncurrents.flattop → [Hours]\nbop.Pfusion → [MW]\nbop.Qfusion → [-]\nbop.thermal_cycle_type → [-]\nbop.thermal_efficiency_plant → [%]\nbop.thermal_efficiency_cycle → [%]\nbop.power_electric_generated → [MW]\nbop.Pelectric_net → [MW]\nbop.Qplant → [-]\nbop.TBR → [-]\nbuild.PF_material → [-]\nbuild.TF_material → [-]\nbuild.OH_material → [-]\nbuild.TF_max_b → [T]\nbuild.OH_max_b → [T]\nbuild.TF_j_margin → [-]\nbuild.OH_j_margin → [-]\nbuild.TF_stress_margin → [-]\nbuild.OH_stress_margin → [-]\ncosting.capital_cost → [$B]\ncosting.levelized_CoE → [$/kWh]\ncosting.TF_of_total → [%]\ncosting.BOP_of_total → [%]\ncosting.blanket_of_total → [%]\ncosting.cryostat_of_total → [%]\n\n\n\n\n\n","category":"constant"},{"location":"api/#Geometry","page":"API Reference","title":"Geometry","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.centroid\nIMAS.perimeter\nIMAS.area\nIMAS.revolution_volume\nIMAS.intersection_angles\nIMAS.intersection\nIMAS.intersection_split\nIMAS.point_to_line_distance\nIMAS.closest_point_to_segment\nIMAS.point_to_segment_distance\nIMAS.point_to_path_distance\nIMAS.rdp_simplify_2d_path\nIMAS.rwa_simplify_2d_path\nIMAS.calculate_angle\nIMAS.simplify_2d_path\nIMAS.resample_2d_path\nIMAS.resample_plasma_boundary\nIMAS.is_updown_symmetric\nIMAS.minimum_distance_polygons_vertices\nIMAS.minimum_distance_polygons\nIMAS.min_mean_distance_polygons\nIMAS.curvature\nIMAS.angle_between_two_vectors\nIMAS.bisector\nIMAS.polygon_rays\nIMAS.split_long_segments\nIMAS.thick_line_polygon\nIMAS.convex_hull","category":"page"},{"location":"api/#IMAS.centroid","page":"API Reference","title":"IMAS.centroid","text":"centroid(x::AbstractVector{<:T}, y::AbstractVector{<:T}) where {T<:Real}\n\nCalculate centroid of polygon\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.perimeter","page":"API Reference","title":"IMAS.perimeter","text":"perimeter(r::AbstractVector{T}, z::AbstractVector{T})::T where {T<:Real}\n\nCalculate the perimeter of a polygon\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.area","page":"API Reference","title":"IMAS.area","text":"area(x::AbstractVector{<:T}, y::AbstractVector{<:T}) where {T<:Real}\n\nCalculate area of polygon\n\n\n\n\n\narea(layer::IMAS.build__layer)\n\nCalculate cross-sectional area of a build layer\n\n\n\n\n\narea(coil::IMAS.pf_active__coil)\n\nReturns cross sectional area of PF coils\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.revolution_volume","page":"API Reference","title":"IMAS.revolution_volume","text":"revolution_volume(x::AbstractVector{<:T}, y::AbstractVector{<:T}) where {T<:Real}\n\nCalculate volume of polygon revolved around x=0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.intersection_angles","page":"API Reference","title":"IMAS.intersection_angles","text":"intersection_angles(\n    path1_r::AbstractVector{T},\n    path1_z::AbstractVector{T},\n    path2_r::AbstractVector{T},\n    path2_z::AbstractVector{T},\n    intersection_indexes::Vector{StaticArrays.SVector{2,Int}};\n    mod_pi::Bool=true\n) where {T<:Real}\n\nreturns angles of intersections between two paths and intersection_indexes given by intersection() function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.intersection","page":"API Reference","title":"IMAS.intersection","text":"intersection(\n    l1_x::AbstractVector{T},\n    l1_y::AbstractVector{T},\n    l2_x::AbstractVector{T},\n    l2_y::AbstractVector{T}\n) where {T<:Real}\n\nIntersections between two 2D paths, returns list of (x,y) intersection indexes and crossing points\n\n\n\n\n\nintersection(\n    l1_x::AbstractVector{T},\n    l1_y::AbstractVector{T},\n    l2_x::AbstractVector{T},\n    l2_y::AbstractVector{T},\n    tolerance::Float64) where {T<:Real}\n\nIntersections between two 2D paths, returns list of (x,y) intersection indexes and crossing points\n\nEndpoints crossings are checked with some tolerance\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.intersection_split","page":"API Reference","title":"IMAS.intersection_split","text":"intersection_split(\n    l1_x::AbstractVector{T},\n    l1_y::AbstractVector{T},\n    l2_x::AbstractVector{T},\n    l2_y::AbstractVector{T}) where {T<:Real}\n\nReturns vector of segments of l1x,l1y split at the intersections with l2x,l2y\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.point_to_line_distance","page":"API Reference","title":"IMAS.point_to_line_distance","text":"point_to_line_distance(x0::Real, y0::Real, x1::Real, y1::Real, x2::Real, y2::Real)\n\nDistance of point (x0,y0) from line defined by points (x1,y1) and (x2,y2)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.closest_point_to_segment","page":"API Reference","title":"IMAS.closest_point_to_segment","text":"closest_point_to_segment(x0::Real, y0::Real, x1::Real, y1::Real, x2::Real, y2::Real)\n\nClosest point on segment defined by points (x1,y1) and (x2,y2) to point (x0,y0)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.point_to_segment_distance","page":"API Reference","title":"IMAS.point_to_segment_distance","text":"point_to_segment_distance(x0::Real, y0::Real, x1::Real, y1::Real, x2::Real, y2::Real)\n\nDistance of point (x0,y0) from segment defined by points (x1,y1) and (x2,y2)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.point_to_path_distance","page":"API Reference","title":"IMAS.point_to_path_distance","text":"point_to_path_distance(x0::Real, y0::Real, x::AbstractVector{<:Real}, y::AbstractVector{<:Real})\n\nDistance of point (x0,y0) from path defined by vectors x and y\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.rdp_simplify_2d_path","page":"API Reference","title":"IMAS.rdp_simplify_2d_path","text":"rdp_simplify_2d_path(x::AbstractArray{T}, y::AbstractArray{T}, epsilon::T) where {T<:Real}\n\nSimplifies a 2D line represented by arrays of x and y coordinates using the Ramer-Douglas-Peucker algorithm. The epsilon parameter controls the maximum distance allowed between a point on the original line and its simplified representation.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.rwa_simplify_2d_path","page":"API Reference","title":"IMAS.rwa_simplify_2d_path","text":"rwa_simplify_2d_path(x::AbstractArray{T}, y::AbstractArray{T}, epsilon::T) where {T<:Real}\n\nSimplifies a 2D line represented by arrays of x and y coordinates using the Reumann-Witkam Algorithm algorithm. This algorithm uses a threshold value to determine which points to keep in the path. Points are kept if the angle between the previous and next line segments is greater than the threshold, and removed if it is less than or equal to the threshold.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.calculate_angle","page":"API Reference","title":"IMAS.calculate_angle","text":"calculate_angle(p1::T, p2::T, p3::T) where {T}\n\nCalculate the angle between three points\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.simplify_2d_path","page":"API Reference","title":"IMAS.simplify_2d_path","text":"simplify_2d_path(x::AbstractArray{T}, y::AbstractArray{T}, simplification_factor::T; model::Symbol=:distance)\n\nSimplify 2D path by :curvature (Reumann-Witkam Algorithm) or :distance (Ramer-Douglas-Peucker) algorithms\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.resample_2d_path","page":"API Reference","title":"IMAS.resample_2d_path","text":"resample_2d_path(\n    x::AbstractVector{T},\n    y::AbstractVector{T};\n    step::Float64=0.0,\n    n_points::Integer=0,\n    curvature_weight::Float64=0.0,\n    retain_extrema::Bool=false,\n    retain_original_xy::Bool=false,\n    method::Symbol=:cubic) where {T<:Real}\n\nResample 2D line with uniform stepping (or number of points) with option to add more points where curvature is highest and option to retain extrema in x and y (in these cases stepping is not constant anymore!)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.resample_plasma_boundary","page":"API Reference","title":"IMAS.resample_plasma_boundary","text":"resample_plasma_boundary(\n    x::AbstractVector{T},\n    y::AbstractVector{T};\n    step::Float64=0.0,\n    n_points::Integer=0,\n    curvature_weight::Float64=0.0,\n    retain_extrema::Bool=true,\n    retain_original_xy::Bool=false,\n    method::Symbol=:linear) where {T<:Real}\n\nLike resample2dpath but with retain_extrema=true and method=:linear as defaults\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.is_updown_symmetric","page":"API Reference","title":"IMAS.is_updown_symmetric","text":"is_updown_symmetric(pr::Vector{T}, pz::Vector{T}; order::Int=4, precision::Float64=1E-3) where {T<:Real}\n\nReturns true if boundary is updown symmetric\n\n\n\n\n\nis_updown_symmetric(mxh::MXH; precision::Float64=1E-3)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.minimum_distance_polygons_vertices","page":"API Reference","title":"IMAS.minimum_distance_polygons_vertices","text":"minimum_distance_polygons_vertices(\n    R_obj1::AbstractVector{<:T},\n    Z_obj1::AbstractVector{<:T},\n    R_obj2::AbstractVector{<:T},\n    Z_obj2::AbstractVector{<:T};\n    return_index::Bool=false) where {T<:Real}\n\nReturns minimum distance between two polygons vertices\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.minimum_distance_polygons","page":"API Reference","title":"IMAS.minimum_distance_polygons","text":"minimum_distance_polygons(\n    R_obj1::AbstractVector{<:T},\n    Z_obj1::AbstractVector{<:T},\n    R_obj2::AbstractVector{<:T},\n    Z_obj2::AbstractVector{<:T}) where {T<:Real}\n\nReturns minimum distance between two polygons\n\nNOTE: this is the actual distance, not the distance between the vertices\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.min_mean_distance_polygons","page":"API Reference","title":"IMAS.min_mean_distance_polygons","text":"min_mean_distance_polygons(\n    R_obj1::AbstractVector{<:T},\n    Z_obj1::AbstractVector{<:T},\n    R_obj2::AbstractVector{<:T},\n    Z_obj2::AbstractVector{<:T}) where {T<:Real}\n\nCalculate the minimum and mean distances between two polygons in 2D space.\n\nNOTE: this is the actual distance, not the distance between the vertices\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.curvature","page":"API Reference","title":"IMAS.curvature","text":"curvature(pr::AbstractVector{T}, pz::AbstractVector{T}) where {T<:Real}\n\nCalculate the curvature of a 2D path defined by pr and pz using a finite difference approximation.\n\nThe path is assumed to be closed if the first and last points are the same, and open otherwise.\n\nArguments\n\npr: Real abstract vector representing the r-coordinates of the path.\npz: Real abstract vector representing the z-coordinates of the path.\n\nReturns\n\nA vector of the same length as pr and pz with the calculated curvature values.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.angle_between_two_vectors","page":"API Reference","title":"IMAS.angle_between_two_vectors","text":"angle_between_two_vectors(\n    v1_p1::Tuple{T,T},\n    v1_p2::Tuple{T,T},\n    v2_p1::Tuple{T,T},\n    v2_p2::Tuple{T,T}) where {T<:Real}\n\nReturns angle in radiants between two vectors defined by their start and end points\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.bisector","page":"API Reference","title":"IMAS.bisector","text":"bisector(v1, v2, v3)\n\nReturns signed unitary bisector given three vertices\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.polygon_rays","page":"API Reference","title":"IMAS.polygon_rays","text":"polygon_rays(vertices::AbstractVector, extent_a::Float64, extent_b::Float64)\n\nReturns bisecting \"rays\" (lines) that radiate from vertices of a polygon\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.split_long_segments","page":"API Reference","title":"IMAS.split_long_segments","text":"split_long_segments(R::AbstractVector{T}, Z::AbstractVector{T}, max_length::Float64) where {T<:Real}\n\nSplit long segments of a polygon so that each resulting segment is always <= max_length\n\n\n\n\n\nsplit_long_segments(R::AbstractVector{T}, Z::AbstractVector{T}, n_points::Int) where {T<:Real}\n\nSplit long segments of a polygon so that there are at least n_points in it\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.thick_line_polygon","page":"API Reference","title":"IMAS.thick_line_polygon","text":"thick_line_polygon(r1, z1, r2, z2, thickness1, thickness2)\n\nGenerates polygon from a thick line. Returns points of the quadrilateral polygon\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.convex_hull","page":"API Reference","title":"IMAS.convex_hull","text":"convex_hull(xy_points::AbstractVector; closed_polygon::Bool)\n\nCompute the convex hull of a set of 2D points, sorted in counter-clockwise order. The resulting convex hull forms a closed polygon by appending the first point at the end.\n\n\n\n\n\nconvex_hull(x::AbstractVector{T}, y::AbstractVector{T}; closed_polygon::Bool) where {T}\n\n\n\n\n\n","category":"function"},{"location":"api/#Math","page":"API Reference","title":"Math","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.norm01\nIMAS.to_range\nIMAS.meshgrid\nIMAS.moving_average\nIMAS.calc_z\nIMAS.integ_z\nIMAS.pack_grid_gradients\nIMAS.unique_indices\nIMAS.getindex_circular\nIMAS.chunk_indices","category":"page"},{"location":"api/#IMAS.norm01","page":"API Reference","title":"IMAS.norm01","text":"norm01(x::T)::T where {T<:AbstractVector{<:Real}}\n\nNormalize a vector so that the first item in the array is 0 and the last one is 1 This is handy where psinorm should be used (and IMAS does not define a psinorm array)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.to_range","page":"API Reference","title":"IMAS.to_range","text":"to_range(vector::AbstractVector)\n\nTurn a vector into a range (if possible)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.meshgrid","page":"API Reference","title":"IMAS.meshgrid","text":"meshgrid(x::AbstractVector{T}, y::AbstractVector{T}) where {T}\n\nReturn coordinate matrices from coordinate vectors\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.moving_average","page":"API Reference","title":"IMAS.moving_average","text":"moving_average(data::Vector{<:Real}, window_size::Int)\n\nCalculate the moving average of a data vector using a specified window size. The window size is always rounded up to the closest odd number to maintain symmetry around each data point.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.calc_z","page":"API Reference","title":"IMAS.calc_z","text":"calc_z(x::AbstractVector{<:Real}, f::AbstractVector{<:Real}, method::Symbol)\n\nReturns the gradient scale lengths of vector f on x\n\nThe finite difference method of the gradient can be one of [:backward, :central, :forward, :secondorder, :thirdorder]\n\nNOTE: the inverse scale length is NEGATIVE for typical density/temperature profiles\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.integ_z","page":"API Reference","title":"IMAS.integ_z","text":"integ_z(rho::AbstractVector{<:Real}, z_profile::AbstractVector{<:Real}, bc::Real)\n\nBackward integration of inverse scale length vector with given edge boundary condition\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.pack_grid_gradients","page":"API Reference","title":"IMAS.pack_grid_gradients","text":"pack_grid_gradients(x::AbstractVector{T}, y::AbstractVector{T}; n_points::Int=length(x), l::Float64=1E-2) where {T<:Float64}\n\nReturns grid between minimum(x) and maximum(x) with n_points points positioned to sample y(x) in such a way to pack more points where gradients are greates.\n\nl controls how much the adaptive gradiant sampling should approach linear sampling.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.unique_indices","page":"API Reference","title":"IMAS.unique_indices","text":"unique_indices(vec::AbstractVector)::Vector{Int}\n\nReturn the indices of the first occurrence of each unique element in the input vector vec\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.getindex_circular","page":"API Reference","title":"IMAS.getindex_circular","text":"getindex_circular(vec::AbstractVector{T}, idx::Int)::T where {T}\n\nReturn the element of the vector vec at the position idx.\n\nIf idx is beyond the length of vec or less than 1, it wraps around in a circular manner.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.chunk_indices","page":"API Reference","title":"IMAS.chunk_indices","text":"chunk_indices(dims::Tuple{Vararg{Int}}, N::Int)\n\nSplit the indices of an array with dimensions dims into N chunks of similar size. Each chunk is a generator of CartesianIndex objects.\n\nArguments\n\ndims::Tuple{Vararg{Int}}: A tuple specifying the dimensions of the array. For a 2D array, this would be (rows, cols).\nN::Int: The number of chunks to split the indices into.\n\nReturns\n\nVector with chunks of cartesian indices. Each chunk can be iterated over to get the individual CartesianIndex objects.\n\n\n\n\n\n","category":"function"},{"location":"api/#Outlines","page":"API Reference","title":"Outlines","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.OutlineClosedVector\nIMAS.OutlineOpenVector\nIMAS.CircularVector\nIMAS.is_open_polygon\nIMAS.is_closed_polygon\nIMAS.open_polygon\nIMAS.closed_polygon\nIMAS.is_clockwise\nIMAS.is_counterclockwise","category":"page"},{"location":"api/#IMAS.OutlineClosedVector","page":"API Reference","title":"IMAS.OutlineClosedVector","text":"OutlineClosedVector{T,A<:AbstractVector{T}} <: AbstractVector{T}\n\nOutlines in IMAS v3 ontology are always open (NOTE: in v4 they will always be closed!)\n\nUse OutlineClosedVector to have a vector that behaves like a it's a closed outline, without creating a new array (allocation free)\n\nWhen OutlineClosedVector is put into the dd, it will automatically save it there as an open outline\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.OutlineOpenVector","page":"API Reference","title":"IMAS.OutlineOpenVector","text":"OutlineOpenVector{T,A<:AbstractVector{T}} <: AbstractVector{T}\n\nOutlines in IMAS v3 ontology are always open (NOTE: in v4 they will always be closed!)\n\nUse OutlineOpenVector to have a vector that behaves like a it's a open outline, without creating a new array (allocation free)\n\nWhen OutlineOpenVector is put into the dd, it will automatically save it there as an open outline\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.CircularVector","page":"API Reference","title":"IMAS.CircularVector","text":"CircularVector{T,A<:AbstractVector{T}} <: AbstractVector{T}\n\nVector with circular indexes, without creating a new array (allocation free)\n\nNOTE: It can be combined with OutlineClosedVector and/or OutlineOpenVector, like this: CircularVector(OutlineClosedVector(x, x_is_closed))\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.is_open_polygon","page":"API Reference","title":"IMAS.is_open_polygon","text":"is_open_polygon(R::AbstractVector{T}, Z::AbstractVector{T})::Bool where {T<:Real}\n\nDetermine if a polygon, defined by separate vectors for R and Z coordinates, is open.\n\n\n\n\n\nis_open_polygon(vertices::AbstractVector)::Bool\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.is_closed_polygon","page":"API Reference","title":"IMAS.is_closed_polygon","text":"is_closed_polygon(R::AbstractVector{T}, Z::AbstractVector{T})::Bool where {T<:Real}\n\nDetermine if a polygon, defined by separate vectors for R and Z coordinates, is closed.\n\n\n\n\n\nis_closed_polygon(vertices::AbstractVector)::Bool\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.open_polygon","page":"API Reference","title":"IMAS.open_polygon","text":"open_polygon(R::AbstractVector{T}, Z::AbstractVector{T}, args...) where {T<:Real}\n\nReturns a view of the vectors R and Z such that they are a open polygon\n\nReturns a named tuple containing the status of the polygon (wasclosed, wasopen) and the views of the R and Z vectors.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.closed_polygon","page":"API Reference","title":"IMAS.closed_polygon","text":"closed_polygon(R::AbstractVector{T}, Z::AbstractVector{T}, args...) where {T<:Real}\n\nReturns a view of the vectors R and Z such that they are a closed polygon\n\nReturns a named tuple containing the status of the polygon (wasclosed, wasopen) and the views of the R and Z vectors.\n\n\n\n\n\nclosed_polygon(R::AbstractVector{T}, Z::AbstractVector{T}, closed::Bool, args...) where {T<:Real}\n\nReturns a closed polygon depending on closed otherwise returns an open polygon\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.is_clockwise","page":"API Reference","title":"IMAS.is_clockwise","text":"is_clockwise(r::AbstractVector{T}, z::AbstractVector{T})::Bool where {T<:Real}\n\nReturns true/false if polygon is defined clockwise\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.is_counterclockwise","page":"API Reference","title":"IMAS.is_counterclockwise","text":"is_counterclockwise(r::AbstractVector{T}, z::AbstractVector{T})::Bool where {T<:Real}\n\nReturns true/false if polygon is defined counterclockwise\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-boundary","page":"API Reference","title":"Physics boundary","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.boundary_shape\nIMAS.boundary\nIMAS.x_points\nIMAS.strike_points","category":"page"},{"location":"api/#IMAS.boundary_shape","page":"API Reference","title":"IMAS.boundary_shape","text":"boundary_shape(;\n    a::T,\n    eps::T,\n    kapu::T,\n    kapl::T,\n    delu::T,\n    dell::T,\n    zetaou::T,\n    zetaiu::T,\n    zetail::T,\n    zetaol::T,\n    zoffset::T,\n    upnull::Bool=false,\n    lonull::Bool=false,\n    npts::Int=90\n) where {T<:Real}\n\nFunction used to generate boundary shapes based on T. C. Luce, PPCF, 55 9 (2013)\n\na: minor radius\neps: aspect ratio\nkapu: upper elongation\nlkap: lower elongation\ndelu: upper triangularity\ndell: lower triangularity\nzetaou: upper outer squareness\nzetaiu: upper inner squareness\nzetail: lower inner squareness\nzetaol: lower outer squareness\nzoffset: z-offset\nupnull: toggle upper x-point\nlonull: toggle lower x-point\nnpts: number of points (per quadrant)\n\nreturns tuple with arrays of (r, z, zref)\n\n>> boundary_shape(;a=0.608,eps=0.374,kapu=1.920,kapl=1.719,delu=0.769,dell=0.463,zetaou=-0.155,zetaiu=-0.255,zetail=-0.174,zetaol=-0.227,zoffset=0.000,upnull=true,lonull=false)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.boundary","page":"API Reference","title":"IMAS.boundary","text":"boundary(pc::IMAS.pulse_schedule__position_control{T}, time0::Float64)\n\nreturn boundary from pulseschedule.positioncontrol at a given time0\n\n\n\n\n\nboundary(pc::IMAS.pulse_schedule__position_control{T}, time_index::Int)\n\nreturns boundary from pulseschedule.positioncontrol at a given time_index\n\n\n\n\n\nboundary(pc::IMAS.pulse_schedule__position_control; time0::Float64=global_time(pc))\n\nBeturns r,z vectors from pulseschedule.positioncontrol.equilibriumtime_slice___boundaryoutline\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.x_points","page":"API Reference","title":"IMAS.x_points","text":"x_points(x_points::IMAS.IDSvector{<:IMAS.pulse_schedule__position_control__x_point{T}}; time0::Float64=global_time(x_points)) where {T<:Real}\n\nBeturns vector with tuples of R,Z coordinates of x-points in pulse_schedule at time0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.strike_points","page":"API Reference","title":"IMAS.strike_points","text":"strike_points(strike_points::IMAS.IDSvector{<:IMAS.pulse_schedule__position_control__strike_point{T}}; time0::Float64=global_time(strike_points)) where {T<:Real}\n\nBeturns vector with tuples of R,Z coordinates of x-points in pulse_schedule at time0\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-build","page":"API Reference","title":"Physics build","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.BuildLayerType\nIMAS.BuildLayerSide\nIMAS.BuildLayerShape\nIMAS.build_radii\nIMAS.get_build_indexes\nIMAS.get_build_index\nIMAS.get_build_layers\nIMAS.get_build_layer\nIMAS.opposite_side_layer\nIMAS.func_nested_layers\nIMAS.area\nIMAS.volume\nIMAS.first_wall\nIMAS.first_wall!\nIMAS.build_max_R0_B0\nIMAS.vertical_maintenance\nIMAS.outline","category":"page"},{"location":"api/#IMAS.BuildLayerType","page":"API Reference","title":"IMAS.BuildLayerType","text":"Enum BuildLayerType\n\nUsed for dd.build.layer[:].type\n\n_plasma_ -> -1\n_gap_ -> 0\n_oh_ -> 1\n_tf_ -> 2\n_shield_ -> 3\n_blanket_ -> 4\n_wall_ -> 5\n_vessel_ -> 6\n_cryostat_ -> 7\n_divertor_ -> 8\n_port_ -> 9\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.BuildLayerSide","page":"API Reference","title":"IMAS.BuildLayerSide","text":"Enum BuildLayerSide\n\nUsed for dd.build.layer[:].side\n\n_lfs_ -> -1\n_lhfs_ -> 0\n_hfs_ -> 1\n_in_ -> 2\n_out_ -> 3\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.BuildLayerShape","page":"API Reference","title":"IMAS.BuildLayerShape","text":"Enum BuildLayerShape\n\nUsed for dd.build.layer[:].shape\n\n_offset_ -> 0\n_negative_offset_ -> 1\n_convex_hull_ -> 2\n_mirror_princeton_D_exact_ -> 3\n_princeton_D_ -> 4\n_mirror_princeton_D_ -> 5\n_princeton_D_scaled_ -> 6\n_mirror_princeton_D_scaled_ -> 7\n_rectangle_ -> 8\n_double_ellipse_ -> 9\n_mirror_double_ellipse_ -> 10\n_rectangle_ellipse_ -> 11\n_mirror_rectangle_ellipse_ -> 12\n_circle_ellipse_ -> 13\n_mirror_circle_ellipse_ -> 14\n_triple_arc_ -> 15\n_mirror_triple_arc_ -> 16\n_miller_ -> 17\n_silo_ -> 18\n_racetrack_ -> 19\n_undefined_ -> 20\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.build_radii","page":"API Reference","title":"IMAS.build_radii","text":"build_radii(layers::IMAS.IDSvector{<:IMAS.build__layer{T}}) where {T<:Real}\n\nConvert thicknesses to absolute radii in the build layers\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.get_build_indexes","page":"API Reference","title":"IMAS.get_build_indexes","text":"get_build_indexes(\n    layers::IMAS.IDSvector{<:IMAS.build__layer};\n    type::Union{Nothing,BuildLayerType}=nothing,\n    name::Union{Nothing,String}=nothing,\n    identifier::Union{Nothing,Integer}=nothing,\n    fs::Union{Nothing,BuildLayerSide,AbstractVector{BuildLayerSide}}=nothing)\n\nReturns indexes of layer(s) in build based on a series of selection criteria\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.get_build_index","page":"API Reference","title":"IMAS.get_build_index","text":"get_build_index(\n    layers::IMAS.IDSvector{<:IMAS.build__layer};\n    type::Union{Nothing,BuildLayerType}=nothing,\n    name::Union{Nothing,String}=nothing,\n    identifier::Union{Nothing,Integer}=nothing,\n    fs::Union{Nothing,BuildLayerSide,AbstractVector{BuildLayerSide}}=nothing)\n\nReturns index of layer in build based on a series of selection criteria\n\nIt raises an error if none or more than one layer matches.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.get_build_layers","page":"API Reference","title":"IMAS.get_build_layers","text":"get_build_layers(\n    layers::IMAS.IDSvector{<:IMAS.build__layer};\n    type::Union{Nothing,BuildLayerType}=nothing,\n    name::Union{Nothing,String}=nothing,\n    identifier::Union{Nothing,Integer}=nothing,\n    fs::Union{Nothing,BuildLayerSide,AbstractVector{BuildLayerSide}}=nothing)\n\nSelect layer(s) in build based on a series of selection criteria\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.get_build_layer","page":"API Reference","title":"IMAS.get_build_layer","text":"get_build_layer(\n    layers::IMAS.IDSvector{<:IMAS.build__layer};\n    type::Union{Nothing,BuildLayerType}=nothing,\n    name::Union{Nothing,String}=nothing,\n    identifier::Union{Nothing,Integer}=nothing,\n    fs::Union{Nothing,BuildLayerSide,AbstractVector{BuildLayerSide}}=nothing)\n\nSelect layer in build based on a series of selection criteria\n\nIt raises an error if none or more than one layer matches.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.opposite_side_layer","page":"API Reference","title":"IMAS.opposite_side_layer","text":"opposite_side_layer(layer::IMAS.build__layer)\n\nReturns corresponding layer on the high/low field side\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.func_nested_layers","page":"API Reference","title":"IMAS.func_nested_layers","text":"func_nested_layers(layer::IMAS.build__layer{D}, func::Function)::D where {D<:Real}\n\nApply function func to a layer, then subtract func applied to the layer inside of it.\n\nThis is used to caclulate area, volume, etc.. of each layer.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.volume","page":"API Reference","title":"IMAS.volume","text":"volume(layer::IMAS.build__layer)\n\nCalculate volume of a build layer revolved around z axis\n\n\n\n\n\nvolume(layer::IMAS.build__structure)\n\nCalculate volume of a build structure outline revolved around z axis\n\n\n\n\n\nvolume(coil::IMAS.pf_active__coil)\n\nReturns volume of PF coils\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.first_wall","page":"API Reference","title":"IMAS.first_wall","text":"first_wall(wall::IMAS.wall{T}) where {T<:Real}\n\nReturns named tuple with outline of the official contiguous first wall limiter contour, or an empty outline if not present\n\nNOTE: in IMAS wall.description_2d[].limiter.type.index == 0 indicates an official contiguous limiter contour\n\n\n\n\n\nfirst_wall(pf_active::IMAS.pf_active{T}) where {T<:Real}\n\nReturns named tuple with outline of the wall defined by the pf_active.coils\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.first_wall!","page":"API Reference","title":"IMAS.first_wall!","text":"first_wall!(wall::IMAS.wall{T}, r::AbstractVector{T}, z::AbstractVector{T}) where {T<:Real}\n\nSet wall.description_2d[?].limiter.unit[1].outline from input r and z\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.build_max_R0_B0","page":"API Reference","title":"IMAS.build_max_R0_B0","text":"build_max_R0_B0(bd::IMAS.build)\n\nReturns the plasma geometric center (r0) and the maximum vacuum toroidal magnetic field (b0) evaluated at (r0) that the TF build allows\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.vertical_maintenance","page":"API Reference","title":"IMAS.vertical_maintenance","text":"vertical_maintenance(bd::IMAS.build; tor_modularity::Int=2, pol_modularity::Int=1, gap_VV_BL::Float64=0.1)\n\nReturns the radial dimensions of the vertical vacuum port for blanket maintenance\n\ngapVVBL is the margin between the blanket module and the wall (10cm seems reasonable)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.outline","page":"API Reference","title":"IMAS.outline","text":"outline(layer::Union{IMAS.build__layer, IMAS.build__structure})\n\noutline(out::Union{IMAS.build__layer___outline,IMAS.build__structure___outline})\n\nReturns a closed polygon as a named tuple with (r,z) of a dd.build.layer or dd.build.structure\n\n\n\n\n\noutline(element::Union{IMAS.pf_active__coil___element{T},IMAS.pf_passive__loop___element{T}}) where {T<:Real}\n\nReturns named tuple with r and z arrays outline, independent of geometry_type used to describe the element\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-collisions","page":"API Reference","title":"Physics collisions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.lnΛ_ee\nIMAS.lnΛ_ei\nIMAS.lnΛ_ii\nIMAS.lnΛ_fi","category":"page"},{"location":"api/#IMAS.lnΛ_ee","page":"API Reference","title":"IMAS.lnΛ_ee","text":"lnΛ_ee(ne::Real, Te::Real)\n\nCalculate Couloumb logarithm (lnΛ) for thermal electron-electron collisions [NRL Plasma Formulary]\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.lnΛ_ei","page":"API Reference","title":"IMAS.lnΛ_ei","text":"nΛ_ei(ne::S, Te::P, ni::AbstractVector{Q}, Ti::AbstractVector{R}, mi::AbstractVector{T}, Zi::AbstractVector{Int}) where {S<:Real,P<:Real,Q<:Real,R<:Real,T<:Real}\n\nCalculate Couloumb logarithm (lnΛ) for thermal electron-ion collisions [NRL Plasma Formulary]\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\nni: list of ion densities [m^-3]\nTi: list of ion temperaturs [eV]\nmi: list of ion masses [amu]\nZi: list of ion charges\n\n\n\n\n\nlnΛ_ei(ne::Real, Te::Real)\n\nCalculate Couloumb logarithm (lnΛ) for thermal electron-ion collisions where Ti*me/mi < 10Zi^2 eV < Te [NRL Plasma Formulary]\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.lnΛ_ii","page":"API Reference","title":"IMAS.lnΛ_ii","text":"lnΛ_ii(ne::Real, Te::Real, ni1::Real, Ti1::Real, mi1::Real, Zi1::Int, ni2::Real, Ti2::Real, mi2::Real, Zi2::Int; beta_D::Real=0.0)\n\nCalculate Couloumb logarithm (lnΛ) for mixed thermal ion1-ion2 collisions [NRL Plasma Formulary]\n\nne: electron density [m^-3]\nTe: electron temperaturs [eV]\nni1: ion1 density [m^-3]\nTi1: ion1 temperature [eV]\nmi1: ion1 mass [amu]\nZi1: ion1 charge\nni1: ion2 density [m^-3]\nTi1: ion2 temperature [eV]\nmi1: ion2 mass [amu]\nZi1: ion2 charge\nbeta_D: relative drift velocities between ion species v_D = beta_D*c\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.lnΛ_fi","page":"API Reference","title":"IMAS.lnΛ_fi","text":"lnΛ_fi(ne::Real, Te::Real, n_i::Real, T_i::Real, m_i::Real, Z_i::Int, beta_f::Real, mf::Real, Zf::Int; verbose=true)\n\nCalculate Couloumb logarithm (lnΛ) for beam/fast ion in the presence of warm electrons/ions [NRL Plasma Formulary]\n\nne: electron density [m^-3]\nTe: electron temperaturs [eV]\nn_i: ion density [m^-3]\nTi: ion temperature [eV]\nmi: ion mass [amu]\nZi: ion charge\nbeta_f: relative fast ion velocity v_f = beta_f*c\nmf: mass of fast ion [amu]\nZf: charge of fast ion\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-constants","page":"API Reference","title":"Physics constants","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.mks\nIMAS.cgs","category":"page"},{"location":"api/#IMAS.mks","page":"API Reference","title":"IMAS.mks","text":"Named tuple with physics constants in mks (and eV):\n\nμ_0 = 1.25663706212e-6 [N A^-2]  # Vacuum permeability\nc = 2.99792458e8 [m s^-1]        # Speed of light in vacuum\nϵ_0 = 8.8541878128e-12 [F m^-1]  # Vacuum permittivity\nk_B = 1.380649e-23 [J K^-1]      # Boltzmann constant\ne = 1.602176634e-19 [C]          # Elementary charge\nm_e = 9.1093837015e-31 [kg]      # Electron mass\nm_p = 1.67262192369e-27 [kg]     # Proton mass\nm_n = 1.67492749804e-27 [kg]     # Neutron mass\nm_d = 3.3435837768e-27 [kg]      # Deuteron mass\natm = 101325.0 [Pa]              # Standard atmosphere\nm_u = 1.6605390666e-27 [kg]      # Atomic mass constant\navog = 6.02214076e23 [mol^-1]    # Avogadro constant\nE_α = 3.518e6 [eV]               # Alpha particle energy\nE_n = 14.072e6 [eV]              # Neutron energy\n\n\n\n\n\n","category":"constant"},{"location":"api/#IMAS.cgs","page":"API Reference","title":"IMAS.cgs","text":"Named tuple with physics constants used for interfacing with CGS codes:\n\ne=4.8032e-10 # stacoul\nk=1.6022e-12 # erg/eV\nc=2.9979e10 # cm/s\nme=9.1094e-28 # g\nmp=1.6726e-24 # g\nmd=3.3435837768e-24 # g\nT_to_Gauss=1e4\nErg_to_J=1e-7\nm_to_cm=1e2\nm²_to_cm²=1E4\nm³_to_cm³=1e6\n\n\n\n\n\n","category":"constant"},{"location":"api/#Physics-currents","page":"API Reference","title":"Physics currents","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.j_ohmic_steady_state\nIMAS.JtoR_2_JparB\nIMAS.JparB_2_JtoR\nIMAS.Jtor_2_Jpar\nIMAS.Jpar_2_Jtor\nIMAS.vloop\nIMAS.vloop_time\nIMAS.Ip_non_inductive\nIMAS.Ip_bootstrap\nIMAS.Ip_ohmic\nIMAS.Ip\nIMAS.plasma_lumped_resistance","category":"page"},{"location":"api/#IMAS.j_ohmic_steady_state","page":"API Reference","title":"IMAS.j_ohmic_steady_state","text":"j_ohmic_steady_state(eqt::IMAS.equilibrium__time_slice{T}, cp1d::IMAS.core_profiles__profiles_1d{T}, ip::T) where {T<:Real}\n\nSets j_ohmic parallel current density to what it would be at steady-state, based on parallel conductivity and j_non_inductive and a target ip\n\nRequires constant loop voltage: Vl = 2π * η * <J_oh⋅B> / (F * <R⁻²>) = constant\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.JtoR_2_JparB","page":"API Reference","title":"IMAS.JtoR_2_JparB","text":"JtoR_2_JparB(rho_tor_norm::Vector{<:Real}, JtoR::Vector{<:Real}, includes_bootstrap::Bool, eqt::IMAS.equilibrium__time_slice)\n\nGiven <Jt/R> returns <J⋅B>\n\nTransformation obeys <J⋅B> = (1/f)*(<B^2>/<1/R^2>)*(<Jt/R> + dp/dpsi*(1 - f^2*<1/R^2>/<B^2>))\n\nIncludes_bootstrap set to true if input current includes bootstrap\n\nNOTE: Jtor ≂̸ JtoR\n\n<Jt/R> = <Jt/R>/<1/R> * <1/R> = Jtor * <1/R> = Jtor * gm9\n\nNOTE: Jpar ≂̸ JparB\n\nJparB = Jpar * B0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.JparB_2_JtoR","page":"API Reference","title":"IMAS.JparB_2_JtoR","text":"JparB_2_JtoR(rho_tor_norm::Vector{<:Real}, JparB::Vector{<:Real}, includes_bootstrap::Bool, eqt::IMAS.equilibrium__time_slice)\n\nGiven <J⋅B> returns <Jt/R>\n\nTransformation obeys <J⋅B> = (1/f)*(<B^2>/<1/R^2>)*(<Jt/R> + dp/dpsi*(1 - f^2*<1/R^2>/<B^2>))\n\nIncludes_bootstrap set to true if input current includes bootstrap\n\nNOTE: Jtor ≂̸ JtoR\n\n<Jt/R> = <Jt/R>/<1/R> * <1/R> = Jtor * <1/R> = Jtor * gm9\n\nNOTE: Jpar ≂̸ JparB\n\nJparB = Jpar * B0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Jtor_2_Jpar","page":"API Reference","title":"IMAS.Jtor_2_Jpar","text":"Jtor_2_Jpar(rho_tor_norm::Vector{<:Real}, Jtor::Vector{<:Real}, includes_bootstrap::Bool, eqt::IMAS.equilibrium__time_slice)\n\nGiven Jtor returns Jpar\n\nIncludes_bootstrap set to true if input current includes bootstrap\n\nNOTE: Jtor ≂̸ JtoR\n\n<Jt/R> = <Jt/R>/<1/R> * <1/R> = Jtor * <1/R> = Jtor * gm9\n\nNOTE: Jpar ≂̸ JparB\n\nJparB = Jpar * B0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Jpar_2_Jtor","page":"API Reference","title":"IMAS.Jpar_2_Jtor","text":"Jpar_2_Jtor(rho_tor_norm::Vector{<:Real}, Jpar::Vector{<:Real}, includes_bootstrap::Bool, eqt::IMAS.equilibrium__time_slice)\n\nGiven Jpar returns Jtor\n\nIncludes_bootstrap set to true if input current includes bootstrap\n\nNOTE: Jtor ≂̸ JtoR\n\n<Jt/R> = <Jt/R>/<1/R> * <1/R> = Jtor * <1/R> = Jtor * gm9\n\nNOTE: Jpar ≂̸ JparB\n\nJparB = Jpar * B0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.vloop","page":"API Reference","title":"IMAS.vloop","text":"vloop(cp1d::IMAS.core_profiles__profiles_1d{T})::T where {T<:Real}\n\nVloop = 2π * η * <J_oh⋅B> / (F * <R⁻²>): method emphasizes the resistive nature of the plasma\n\n\n\n\n\nvloop(eq::IMAS.equilibrium{T}; time0::Float64=global_time(eq))::T where {T<:Real}\n\nVloop = dψ/dt: method emphasizes the inductive nature of the loop voltage. Assumes COCOS 11.\n\n\n\n\n\nvloop(ct::IMAS.controllers{T}; time0::Float64=global_time(ct))::T where {T<:Real}\n\nReturns vloop at time0 from controller named ip\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.vloop_time","page":"API Reference","title":"IMAS.vloop_time","text":"vloop_time(ct::IMAS.controllers{T}) where {T<:Real}\n\nReturns named tuple with time and data with vloop from controller named ip\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Ip_non_inductive","page":"API Reference","title":"IMAS.Ip_non_inductive","text":"Ip_non_inductive(cp1d::IMAS.core_profiles__profiles_1d{T}, eqt::IMAS.equilibrium__time_slice{T}) where {T<:Real}\n\nIntegrated toroidal non-inductive current\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Ip_bootstrap","page":"API Reference","title":"IMAS.Ip_bootstrap","text":"Ip_bootstrap(cp1d::IMAS.core_profiles__profiles_1d{T}, eqt::IMAS.equilibrium__time_slice{T}) where {T<:Real}\n\nIntegrated toroidal bootstrap current\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Ip_ohmic","page":"API Reference","title":"IMAS.Ip_ohmic","text":"Ip_ohmic(cp1d::IMAS.core_profiles__profiles_1d{T}, eqt::IMAS.equilibrium__time_slice{T}) where {T<:Real}\n\nIntegrated toroidal ohmic current\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Ip","page":"API Reference","title":"IMAS.Ip","text":"Ip(cp1d::IMAS.core_profiles__profiles_1d{T}) where {T<:Real}\n\nIntegrated toroidal total current (based on core_profiles)\n\n\n\n\n\nIp(eqt::IMAS.equilibrium__time_slice{T}) where {T<:Real}\n\nIntegrated toroidal total current (based on equilibrium)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.plasma_lumped_resistance","page":"API Reference","title":"IMAS.plasma_lumped_resistance","text":"plasma_lumped_resistance(dd::IMAS.dd)\n\nReturns equivalent plasma lumped resistance in ohms\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-equilibrium","page":"API Reference","title":"Physics equilibrium","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.calc_pprime_ffprim_f\nIMAS.p_jtor_2_pprime_ffprim_f\nIMAS.symmetrize_equilibrium!\nIMAS.B0_geo\nIMAS.elongation_limit\nIMAS.optimal_kappa_delta","category":"page"},{"location":"api/#IMAS.calc_pprime_ffprim_f","page":"API Reference","title":"IMAS.calc_pprime_ffprim_f","text":"calc_pprime_ffprim_f(\n    psi::T,\n    R::T,\n    one_R::T,\n    one_R2::T,\n    R0::Real,\n    B0::Real;\n    pressure::Union{Missing,T}=missing,\n    dpressure_dpsi::Union{Missing,T}=missing,\n    j_tor::Union{Missing,T}=missing,\n    j_tor_over_R::Union{Missing,T}=missing,\n    f::Union{Missing,T}=missing,\n    f_df_dpsi::Union{Missing,T}=missing,\n    ) where {T<:AbstractVector{<:Real}}\n\nThis method returns the P' and FF' given P or P' and J or J/R based on the current equilibrium fluxsurfaces geometry\n\nArguments:\n\npsi: poloidal flux\nR: <R>\none_R: <1/R>\none_R2: <1/R²>\nR0: R at which B0 is defined\nB0: vacuum magnetic field\npressure: P\ndpressure_dpsi: P'\nj_tor: toroidal current\nj_tor_over_R: flux surface averaged toroidal current density over major radius\nf: F\nf_df_dpsi: FF'\n\nreturns (P', FF', F)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.p_jtor_2_pprime_ffprim_f","page":"API Reference","title":"IMAS.p_jtor_2_pprime_ffprim_f","text":"p_jtor_2_pprime_ffprim_f(eqt1::IMAS.equilibrium__time_slice___profiles_1d, R0::Real, B0::Real)\n\nCalculate P', FF' and F from pressure and j_tor in equilibrium\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.symmetrize_equilibrium!","page":"API Reference","title":"IMAS.symmetrize_equilibrium!","text":"symmetrize_equilibrium!(eqt::IMAS.equilibrium__time_slice)\n\nUpdate equilibrium time slice in place to be symmetric with respect to its magnetic axis.\n\nThis is done by averaging the upper and lower parts of the equilibrium.\n\nFlux surfaces should re-traced after this operation.\n\nNOTE: Use with care! This operation will change the flux surfaces (LCFS included) and as such quantities may change\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.B0_geo","page":"API Reference","title":"IMAS.B0_geo","text":"B0_geo(eqt::IMAS.equilibrium__time_slice{T})::T where{T<:Real}\n\nReturns vacuum B0 at the plasma geometric center, which may or may not be eqt.global_quantities.vacuum_toroidal_field.r0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.elongation_limit","page":"API Reference","title":"IMAS.elongation_limit","text":"elongation_limit(R0_over_a::Real)\n\nReturns elongation limit due to control limit from simple aspect ratio scaling\n\n\n\n\n\nelongation_limit(eqt::IMAS.equilibrium__time_slice)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.optimal_kappa_delta","page":"API Reference","title":"IMAS.optimal_kappa_delta","text":"optimal_kappa_delta(li::T1, βp::T1, ϵ::T1, γτw::T2, ∆o::T2) where {T1<:Real,T2<:Real}\n\nAn analytic scaling relation for the maximum tokamak elongation against n=0 MHD resistive wall modes Jungpyo Lee, Jeffrey P. Freidberg, Antoine J. Cerfon, Martin Greenwald https://doi.org/10.1088%2F1741-4326%2Faa6877\n\nNOTE:\n\nγτw is the feedback capability parameter and represents how fast a instability is controllable (𝛾 is the instability growth rate and τw is the wall diffusion time)  (typically γτw < 10 is assumed for controllability, see VacuumFields.normalized_growth_rate())\n∆o is the outer gap (NOTE: assumes ∆o = ∆i = 1/3 * ∆v) detemines the relation between κ and δ of the plasma boundary and the κw=(κ+3∆o)(1+∆o) and δw=δ(1+∆o) of the wall boundary\n\n\n\n\n\noptimal_kappa_delta(eqt::IMAS.equilibrium__time_slice, γτw::T, ∆o::T) where {T<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-fast","page":"API Reference","title":"Physics fast","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.estrada_I_integrals\nIMAS.α_slowing_down_time\nIMAS.critical_energy\nIMAS.thermalization_time\nIMAS.fast_particles!\nIMAS.sivukhin_fraction","category":"page"},{"location":"api/#IMAS.estrada_I_integrals","page":"API Reference","title":"IMAS.estrada_I_integrals","text":"estrada_I_integrals(ne::Real, Te::Real, ni::AbstractVector{<:Real}, Ti::AbstractVector{<:Real}, mi::AbstractVector{<:Real}, Zi::AbstractVector{Int}, Ef::Real,  mf::Real, Zf::Int)\n\nReturns solution to i2 and i4 integrals from  [Estrada et al.,  Phys of Plasm. 13, 112303 (2006)] Eq. 9 & 10\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\nni: list of ion densities [m^-3]\nTi: list of ion temperatures [eV]\nmi: list of ion masses [amu]\nZi: list of ion charges\nEf: fast ion energy [eV]\nmf: mass of fast ion [amu]\nZf: fast ion charge\n\n\n\n\n\nestrada_I_integrals(ne::Real, Te::Real, ni::AbstractVector{<:Real}, Ti::AbstractVector{<:Real}, mi::AbstractVector{<:Real}, Zi::AbstractVector{Int}, Ef::Real,  mf::Real, Zf::Int)\n\nReturns solution to i2 and i4 integrals from  [Estrada et al.,  Phys of Plasm. 13, 112303 (2006)] Eq. 9 & 10\n\nEf: fast ion energy [eV]\nEc: critical energy [eV]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.α_slowing_down_time","page":"API Reference","title":"IMAS.α_slowing_down_time","text":"α_slowing_down_time(cp1d::IMAS.core_profiles__profiles_1d)\n\nReturns the slowing down time in seconds of α particles evaluated on axis\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.critical_energy","page":"API Reference","title":"IMAS.critical_energy","text":"critical_energy(ne::Real, Te::Real, ni::AbstractVector{<:Real}, Ti::AbstractVector{<:Real}, mi::AbstractVector{<:Real}, Zi::AbstractVector{Int}, mf::Real, Zf::Int; approximate::Bool=false)\n\nReturns Ec the critical energy by finding the root of the difference between the electron and ion drag\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\nni: list of ion densities [m^-3]\nTi: list of ion temperatures [eV]\nmi: list of ion masses [amu]\nZi: list of ion charges\nmf: mass of fast ion [amu]\nZf: fast ion charge\napproximate: calculate critical energy assuming lnΛ_fe == lnΛ_fi. For DIII-D this results in a correction factor of (lnΛfi/lnΛfe)^(2/3) ≈ 1.2.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.thermalization_time","page":"API Reference","title":"IMAS.thermalization_time","text":"thermalization_time(v_f, v_c, tau_s)\n\nCalculate thermalization time in seconds\n\nv_f: fast ion velocity\nv_c: critical velocity\ntau_s: slowing down time\n\n\n\n\n\nthermalization_time(ne::Real, Te::Real, ni::AbstractVector{<:Real}, Ti::AbstractVector{<:Real}, mi::AbstractVector{<:Real}, Zi::AbstractVector{Int}, Ef::Real, mf::Real, Zf::Int)\n\nCalculate thermalization time in seconds of a fast ion with energy Ef and Ti*me/mi < 10Zi^2 eV < Te\n\nne: electron density [m^-3]\nTe: electron temperature [eV]\nni: list of ion densities [m^-3]\nTi: list of ion temperatures [eV]\nmi: list of ion masses [amu]\nZi: list of ion charges\nEf: fast ion energy [eV]\nmf: mass of fast ion [amu]\nZf: fast ion charge\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fast_particles!","page":"API Reference","title":"IMAS.fast_particles!","text":"fast_particles!(cs::IMAS.core_sources, cp1d::IMAS.core_profiles__profiles_1d; verbose::Bool=false)\n\nFills the core_profiles fast ion densities and pressures that result from fast ion sources (eg. fusion and nbi)\n\nThis calculation is done based on the slowing_down_time and thermalization_time of the fast ion species.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.sivukhin_fraction","page":"API Reference","title":"IMAS.sivukhin_fraction","text":"sivukhin_fraction(cp1d::IMAS.core_profiles__profiles_1d, particle_energy::Real, particle_mass::Real)\n\nCompute a low-accuracy but fast approximation of the ion to electron heating fraction for fast particles (like alpha particles and beam particles)\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-flux-surfaces","page":"API Reference","title":"Physics flux-surfaces","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.ψ_interpolant\nIMAS.ρ_interpolant\nIMAS.Br_Bz\nIMAS.Bp\nIMAS.find_psi_boundary\nIMAS.find_psi_separatrix\nIMAS.find_psi_2nd_separatrix\nIMAS.find_psi_last_diverted\nIMAS.find_psi_tangent_omp\nIMAS.find_psi_max\nIMAS.find_psi_wall_omp\nIMAS.interp_rmid_at_psi\nIMAS.SimpleSurface\nIMAS.FluxSurface\nIMAS.trace_simple_surfaces\nIMAS.trace_simple_surfaces!\nIMAS.trace_surfaces\nIMAS.flux_surfaces\nIMAS.flux_surface\nIMAS.flux_surface_avg\nIMAS.volume_integrate\nIMAS.cumlul_volume_integrate\nIMAS.surface_integrate\nIMAS.cumlul_surface_integrate\nIMAS.find_x_point!\nIMAS.x_points_inside_wall\nIMAS.miller_R_a_κ_δ_ζ\nIMAS.fluxsurface_extrema\nIMAS.luce_squareness\nIMAS.areal_elongation","category":"page"},{"location":"api/#IMAS.ψ_interpolant","page":"API Reference","title":"IMAS.ψ_interpolant","text":"ψ_interpolant(eqt2d::IMAS.equilibrium__time_slice___profiles_2d)\n\nReturns r, z, and ψ interpolant named tuple\n\n\n\n\n\nψ_interpolant(r::AbstractRange{T1}, z::AbstractRange{T1}, psi::Matrix{T2}) where {T1<:Real,T2<:Real}\n\n\n\n\n\nψ_interpolant(eqt2dv::IDSvector{<:IMAS.equilibrium__time_slice___profiles_2d})\n\n\n\n\n\nψ_interpolant(eqt::IMAS.equilibrium__time_slice)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ρ_interpolant","page":"API Reference","title":"IMAS.ρ_interpolant","text":"ρ_interpolant(eqt2d::IMAS.equilibrium__time_slice___profiles_2d{T}, phi_norm::T) where {T<:Real}\n\nReturns r, z, and ρ interpolant named tuple\n\n\n\n\n\nρ_interpolant(r::AbstractRange{T}, z::AbstractRange{T}, rho::Matrix{T}) where {T<:Real}\n\n\n\n\n\nρ_interpolant(eqt2dv::IDSvector{<:IMAS.equilibrium__time_slice___profiles_2d{T}}, phi_norm::T) where {T<:Real}\n\n\n\n\n\nρ_interpolant(eqt::IMAS.equilibrium__time_slice)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Br_Bz","page":"API Reference","title":"IMAS.Br_Bz","text":"Br_Bz(eqt2d::IMAS.equilibrium__time_slice___profiles_2d)\n\nReturns Br and Bz named tuple evaluated at r and z starting from ψ interpolant\n\n\n\n\n\nBr_Bz(eqt2dv::IDSvector{<:IMAS.equilibrium__time_slice___profiles_2d})\n\n\n\n\n\nBr_Bz(PSI_interpolant::Interpolations.AbstractInterpolation, r::T, z::T) where {T<:Real}\n\n\n\n\n\nBr_Bz(PSI_interpolant::Interpolations.AbstractInterpolation, r::AbstractArray{T}, z::AbstractArray{T}) where {T<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Bp","page":"API Reference","title":"IMAS.Bp","text":"Bp(eqt2d::IMAS.equilibrium__time_slice___profiles_2d)\n\nReturns Bp evaluated at r and z starting from ψ interpolant\n\n\n\n\n\nBp(PSI_interpolant::Interpolations.AbstractInterpolation, r::T, z::T) where {T<:Real}\n\n\n\n\n\nBp(eqt2dv::IDSvector{<:IMAS.equilibrium__time_slice___profiles_2d})\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_boundary","page":"API Reference","title":"IMAS.find_psi_boundary","text":"find_psi_boundary(\n    eqt::IMAS.equilibrium__time_slice{T},\n    wall_r::AbstractVector{T},\n    wall_z::AbstractVector{T};\n    precision::Float64=1e-6,\n    raise_error_on_not_open::Bool=true,\n    raise_error_on_not_closed::Bool=true\n) where {T<:Real}\n\nFind psi value of the last-closed and first-open flux surface\n\nResults are returned as a named tuple (last_closed=..., first_open=...)\n\n\n\n\n\nfind_psi_boundary(\n    dimR::Union{AbstractVector{T1},AbstractRange{T1}},\n    dimZ::Union{AbstractVector{T1},AbstractRange{T1}},\n    PSI::Matrix{T2},\n    psi_axis::Real,\n    original_psi_boundary::Real,\n    RA::T3,\n    ZA::T3,\n    fw_r::AbstractVector{T4},\n    fw_z::AbstractVector{T5};\n    PSI_interpolant=IMAS.ψ_interpolant(dimR, dimZ, PSI).PSI_interpolant,\n    precision::Float64=1e-6,\n    raise_error_on_not_open::Bool,\n    raise_error_on_not_closed::Bool,\n    verbose::Bool=false\n) where {T1<:Real,T2<:Real,T3<:Real,T4<:Real,T5<:Real}\n\n\n\n\n\nfind_psi_boundary(\n    dimR::Union{AbstractVector{T1},AbstractRange{T1}},\n    dimZ::Union{AbstractVector{T1},AbstractRange{T1}},\n    PSI::Matrix{T2},\n    psi_axis::Real,\n    axis2bnd::Symbol,\n    RA::T3,\n    ZA::T3,\n    fw_r::AbstractVector{T4}=T1[],\n    fw_z::AbstractVector{T5}=T1[],\n    r_cache::AbstractVector{T1}=T1[],\n    z_cache::AbstractVector{T1}=T1[];\n    PSI_interpolant=IMAS.ψ_interpolant(dimR, dimZ, PSI).PSI_interpolant,\n    precision::Float64=1e-6,\n    raise_error_on_not_open::Bool,\n    raise_error_on_not_closed::Bool,\n    verbose::Bool=false\n) where {T1<:Real,T2<:Real,T3<:Real,T4<:Real,T5<:Real}\n\n\n\n\n\nfind_psi_boundary(\n    dimR::Union{AbstractVector{T1},AbstractRange{T1}},\n    dimZ::Union{AbstractVector{T1},AbstractRange{T1}},\n    PSI::Matrix{T2},\n    psirange_init::AbstractVector,\n    RA::T3,\n    ZA::T3,\n    fw_r::AbstractVector{T4},\n    fw_z::AbstractVector{T5},\n    r_cache::AbstractVector{T1}=T1[],\n    z_cache::AbstractVector{T1}=T1[];\n    PSI_interpolant=IMAS.ψ_interpolant(dimR, dimZ, PSI).PSI_interpolant,\n    precision::Float64=1e-6,\n    raise_error_on_not_open::Bool,\n    raise_error_on_not_closed::Bool,\n    verbose::Bool=false\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_separatrix","page":"API Reference","title":"IMAS.find_psi_separatrix","text":"find_psi_separatrix(eqt::IMAS.equilibrium__time_slice{T}; precision::Float64=1E-7) where {T<:Real}\n\nReturns psi of the first magentic separatrix\n\nNote: The first separatrix is the LCFS only in diverted plasmas\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_2nd_separatrix","page":"API Reference","title":"IMAS.find_psi_2nd_separatrix","text":"find_psi_2nd_separatrix(eqt::IMAS.equilibrium__time_slice{T}; type::Symbol=:not_diverted, precision::Float64=1E-7) where {T<:Real}\n\nReturns psi of the second magentic separatrix\n\nreturns either :diverted or :not_diverted surface depending on type\n\n:diverted is when the surface starts and finishes on the same side of the midplane\n:not_diverted is when the surface starts and finishes on opposite sides of the midplane\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_last_diverted","page":"API Reference","title":"IMAS.find_psi_last_diverted","text":"find_psi_last_diverted(\n    eqt::IMAS.equilibrium__time_slice,\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real},\n    PSI_interpolant::Interpolations.AbstractInterpolation;\n    precision::Float64=1e-7)\n\nReturns psi_last_lfs,psifirstlfsfar, andnullwithin_wall`\n\npsi_first_lfs_far will be the first surface inside OFL[:lfs_far]\npsi_last_lfs will be the last surface inside OFL[:lfs]\n\nPrecision between the two is defined on the poloidal crossection area at the OMP (Psol*precision = power flowing between psi_first_lfs_far and psi_last_lfs ~ 0)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_tangent_omp","page":"API Reference","title":"IMAS.find_psi_tangent_omp","text":"find_psi_tangent_omp(\n    eqt::IMAS.equilibrium__time_slice,\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real},\n    PSI_interpolant::Interpolations.AbstractInterpolation;\n    precision::Float64=1e-7)\n\nReturns the psi of the magnetic surface in the SOL which is tangent to the wall near the outer midplane\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_max","page":"API Reference","title":"IMAS.find_psi_max","text":"find_psi_max(\n    eqt::IMAS.equilibrium__time_slice{T},\n    wall_r::AbstractVector{T},\n    wall_z::AbstractVector{T};\n    precision::Float64=1e-2) where {T<:Real}\n\nReturns the max psi useful for an ofl in the SOL with no wall.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_psi_wall_omp","page":"API Reference","title":"IMAS.find_psi_wall_omp","text":"find_psi_wall_omp(\n    eqt::IMAS.equilibrium__time_slice,\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real}\n)\n\nReturns the psi of the magnetic surface in the SOL which intersects the wall at the outer midplane\n\n\n\n\n\nfind_psi_wall_omp(\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    RA::T1,\n    ZA::T1,\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{T2},\n    psi_max::T1,\n    psi_sign::T1\n) where {T1<:Real,T2<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.interp_rmid_at_psi","page":"API Reference","title":"IMAS.interp_rmid_at_psi","text":"interp_rmid_at_psi(eqt::IMAS.equilibrium__time_slice, PSI_interpolant::Interpolations.AbstractInterpolation, R::AbstractVector{<:Real})\n\nReturns the interpolant r_mid(ψ) to compute the r at the midplane of the flux surface identified by ψ\n\nThe vector R defines the sampling of interest for thie interpolation\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.SimpleSurface","page":"API Reference","title":"IMAS.SimpleSurface","text":"struct SimpleSurface{T<:Real} <: AbstractFluxSurface{T}\n    psi::T\n    r::Vector{T}\n    z::Vector{T}\n    ll::Vector{T}\n    fluxexpansion::Vector{T}\n    int_fluxexpansion_dl::T\nend\n\nA simplified version of FluxSurface that only has the contour points and what is needed to compute flux surface averages\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.FluxSurface","page":"API Reference","title":"IMAS.FluxSurface","text":"struct FluxSurface{T<:Real} <: AbstractFluxSurface{T}\n    psi::T\n    r::Vector{T}\n    z::Vector{T}\n    r_at_max_z::T\n    max_z::T\n    r_at_min_z::T\n    min_z::T\n    z_at_max_r::T\n    max_r::T\n    z_at_min_r::T\n    min_r::T\n    Br::Vector{T}\n    Bz::Vector{T}\n    Bp::Vector{T}\n    Btot::Vector{T}\n    ll::Vector{T}\n    fluxexpansion::Vector{T}\n    int_fluxexpansion_dl::T\nend\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.trace_simple_surfaces","page":"API Reference","title":"IMAS.trace_simple_surfaces","text":"trace_simple_surfaces(\n    psi::AbstractVector{T},\n    r::AbstractVector{T},\n    z::AbstractVector{T},\n    PSI::Matrix{T},\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    RA::T,\n    ZA::T,\n    wall_r::AbstractVector{T},\n    wall_z::AbstractVector{T}\n) where {T<:Real}\n\nTrace flux surfaces and returns vector of SimpleSurface structures. The result contains only the contours and what is needed to perform flux-surface averaging.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.trace_simple_surfaces!","page":"API Reference","title":"IMAS.trace_simple_surfaces!","text":"trace_simple_surfaces!(\n    surfaces::Vector{SimpleSurface{T}},\n    psi::AbstractVector{T},\n    r::AbstractVector{T},\n    z::AbstractVector{T},\n    PSI::Matrix{T},\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    RA::T,\n    ZA::T,\n    wall_r::AbstractVector{T},\n    wall_z::AbstractVector{T},\n    r_cache::AbstractVector{T}=T[],\n    z_cache::AbstractVector{T}=T[])\n) where {T<:Real}\n\nTrace flux surfaces and store in surfaces vector of SimpleSurface structures. The result contains only the contours and what is needed to perform flux-surface averaging.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.trace_surfaces","page":"API Reference","title":"IMAS.trace_surfaces","text":"trace_surfaces(eqt::IMAS.equilibrium__time_slice{T}, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}) where {T<:Real}\n\nTrace flux surfaces and returns vector of FluxSurface structures\n\n\n\n\n\ntrace_surfaces(\n    psi::AbstractVector{T},\n    f::AbstractVector{T},\n    r::AbstractVector{T},\n    z::AbstractVector{T},\n    PSI::Matrix{T},\n    BR::Matrix{T},\n    BZ::Matrix{T},\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    RA::T,\n    ZA::T,\n    wall_r::AbstractVector{T},\n    wall_z::AbstractVector{T}\n) where {T<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.flux_surfaces","page":"API Reference","title":"IMAS.flux_surfaces","text":"flux_surfaces(eq::equilibrium{T}, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}) where {T<:Real}\n\nUpdate flux surface averaged and geometric quantities for all time_slices in the equilibrium IDS\n\n\n\n\n\nflux_surfaces(eqt::equilibrium__time_slice{T1}, wall_r::AbstractVector{T2}, wall_z::AbstractVector{T2}) where {T1<:Real,T2<:Real}\n\nUpdate flux surface averaged and geometric quantities for a given equilibrum IDS time slice.\n\n\n\n\n\nflux_surfaces(eqt::equilibrium__time_slice, wall::IMAS.wall)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.flux_surface","page":"API Reference","title":"IMAS.flux_surface","text":"flux_surface(eqt::equilibrium__time_slice{T}, psi_level::Real, type::Symbol, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}) where {T<:Real}\n\nReturns a vector with the (r,z) coordiates of flux surface at given psi_level\n\nThe type parameter:\n\n:any: return all contours\n:closed: all closed flux-surface that encircle the magnetic axis and do not cross the wall\n:open: all open flux-surfaces (considerning open even closed flux surfaces that hit the first wall)\n:open_no_wall: all open flux-surfaces independently of wall\n:encircling: open flux-surfaces encircling the magnetic axis\n\n\n\n\n\nflux_surface(\n    dim1::AbstractVector{T1},\n    dim2::AbstractVector{T1},\n    PSI::AbstractArray{T2},\n    RA::T3,\n    ZA::T3,\n    fw_r::AbstractVector{T4},\n    fw_z::AbstractVector{T4},\n    psi_level::T5,\n    type::Symbol\n) where {T1<:Real,T2<:Real,T3<:Real,T4<:Real,T5<:Real}\n\n\n\n\n\nflux_surface(\n    dim1::Union{AbstractVector{T},AbstractRange{T}},\n    dim2::Union{AbstractVector{T},AbstractRange{T}},\n    cl::Contour.ContourLevel,\n    RA::T,\n    ZA::T,\n    fw_r::AbstractVector{T},\n    fw_z::AbstractVector{T},\n    type::Symbol) where {T<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.flux_surface_avg","page":"API Reference","title":"IMAS.flux_surface_avg","text":"flux_surface_avg(quantity::AbstractVector{T}, surface::FluxSurface{T}) where {T<:Real}\n\nFlux surface averaging of a quantity\n\n\n\n\n\nflux_surface_avg(f::F1, surface::FluxSurface{T}) where {F1<:Function, T<:Real}\n\nFlux surface averaging of a function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.volume_integrate","page":"API Reference","title":"IMAS.volume_integrate","text":"volume_integrate(eqt::IMAS.equilibrium__time_slice, what::AbstractVector{T})::AbstractVector{T} where {T<:Real}\n\nIntegrate quantity over volume\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.cumlul_volume_integrate","page":"API Reference","title":"IMAS.cumlul_volume_integrate","text":"volume_integrate(eqt::IMAS.equilibrium__time_slice, what::AbstractVector{T})::AbstractVector{T} where {T<:Real}\n\nCumulative integrate quantity over volume\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.surface_integrate","page":"API Reference","title":"IMAS.surface_integrate","text":"surface_integrate(eqt::IMAS.equilibrium__time_slice, what::AbstractVector{T})::AbstractVector{T} where {T<:Real}\n\nIntegrate quantity over surface\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.cumlul_surface_integrate","page":"API Reference","title":"IMAS.cumlul_surface_integrate","text":"surface_integrate(eqt::IMAS.equilibrium__time_slice, what::AbstractVector{T})::AbstractVector{T} where {T<:Real}\n\nCumulative integrate quantity over surface\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_x_point!","page":"API Reference","title":"IMAS.find_x_point!","text":"find_x_point!(eqt::IMAS.equilibrium__time_slice{T}, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}) where {T<:Real}\n\nFind the n X-points that are closest to the separatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.x_points_inside_wall","page":"API Reference","title":"IMAS.x_points_inside_wall","text":"x_points_inside_wall(x_points::IDSvector{<:IMAS.equilibrium__time_slice___boundary__x_point}, wall::IMAS.wall)\n\nReturns vector of x_points that are inside of the first wall\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.miller_R_a_κ_δ_ζ","page":"API Reference","title":"IMAS.miller_R_a_κ_δ_ζ","text":"miller_R_a_κ_δ_ζ(pr, pz, r_at_max_z, max_z, r_at_min_z, min_z, z_at_max_r, max_r, z_at_min_r, min_r)\n\nReturns named tuple with R0, a, κ, δu, δl, ζou, ζol, ζil, ζiu of a contour\n\n\n\n\n\nmiller_R_a_κ_δ_ζ(pr::Vector{T}, pz::Vector{T}) where {T<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fluxsurface_extrema","page":"API Reference","title":"IMAS.fluxsurface_extrema","text":"fluxsurface_extrema(pr::Vector{T}, pz::Vector{T}) where {T<:Real}\n\nReturns extrema indexes and values of R,Z flux surfaces vectors:\n\nimaxr, iminr,\nimaxz, iminz,\nr_at_max_z, max_z,\nr_at_min_z, min_z,\nz_at_max_r, max_r,\nz_at_min_r, min_r\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.luce_squareness","page":"API Reference","title":"IMAS.luce_squareness","text":"luce_squareness(pr::AbstractVector{T}, pz::AbstractVector{T}, r_at_max_z::T, max_z::T, r_at_min_z::T, min_z::T, z_at_max_r::T, max_r::T, z_at_min_r::T, min_r::T) where {T<:Real}\n\nSquareness from: \"An analytic functional form for characterization and generation of axisymmetric plasma boundaries\" T.C. Luce, Plasma Phys. Control. Fusion 55 (2013) http://dx.doi.org/10.1088/0741-3335/55/9/095009\n\nReturns: zetaou, zetaol, zetail, zetaiu\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.areal_elongation","page":"API Reference","title":"IMAS.areal_elongation","text":"areal_elongation(eqt::IMAS.equilibrium__time_slice)\n\nA measure of the plasma elongation based on the averaged cross-sectional area of the plasma, most notably used in the H98y2 scaling\n\nSee: https://iopscience.iop.org/article/10.1088/0029-5515/48/9/099801/pdf\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-nuclear","page":"API Reference","title":"Physics nuclear","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.reactivity\nIMAS.D_T_to_He4_reactions\nIMAS.D_D_to_He3_reactions\nIMAS.D_D_to_T_reactions\nIMAS.fusion_reaction_source\nIMAS.D_T_to_He4_source!\nIMAS.D_D_to_He3_source!\nIMAS.D_D_to_T_source!\nIMAS.D_T_to_He4_heating\nIMAS.D_D_to_He3_heating\nIMAS.D_D_to_T_heating\nIMAS.D_T_to_He4_plasma_power\nIMAS.D_D_to_He3_plasma_power\nIMAS.D_D_to_T_plasma_power\nIMAS.fusion_plasma_power\nIMAS.fusion_power\nIMAS.fusion_neutron_power","category":"page"},{"location":"api/#IMAS.reactivity","page":"API Reference","title":"IMAS.reactivity","text":"reactivity(Ti::AbstractVector{<:Real}, model::String; polarized_fuel_fraction::Real=0.0)\n\nFusion reactivity coming from H.-S. Bosch and G.M. Hale, Nucl. Fusion 32 (1992) 611. Model can be [\"D+T→He4\", \"D+He3→He4\", \"D+D→T\", \"D+D→He3\"]\")\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_T_to_He4_reactions","page":"API Reference","title":"IMAS.D_T_to_He4_reactions","text":"D_T_to_He4_reactions(cp1d::IMAS.core_profiles__profiles_1d)\n\nCalculates the number of D-T thermal fusion reactions to He4 in [reactions/m³/s]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_He3_reactions","page":"API Reference","title":"IMAS.D_D_to_He3_reactions","text":"D_D_to_He3_reactions(dd::IMAS.dd)\n\nCalculates the number of D-D thermal fusion reactions to He3 in [reactions/m³/s]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_T_reactions","page":"API Reference","title":"IMAS.D_D_to_T_reactions","text":"D_D_to_T_reactions(dd::IMAS.dd)\n\nCalculates the number of D-D thermal fusion reactions to T in [reactions/m³/s]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fusion_reaction_source","page":"API Reference","title":"IMAS.fusion_reaction_source","text":"fusion_reaction_source(\n    s1d::IMAS.core_sources__source___profiles_1d,\n    reactivity::Vector{<:Real},\n    in1::Symbol,\n    in2::Symbol,\n    out::Symbol,\n    eV::Float64\n)\n\nAdd a fusion reaction source for two isotopes coming in and one coming out\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_T_to_He4_source!","page":"API Reference","title":"IMAS.D_T_to_He4_source!","text":"D_T_to_He4_source!(cs::IMAS.core_sources, cp::IMAS.core_profiles; combine_DT::Bool)\n\nCalculates DT fusion heating with an estimation of the alpha slowing down to the ions and electrons, modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_He3_source!","page":"API Reference","title":"IMAS.D_D_to_He3_source!","text":"D_D_to_He3_source!(cs::IMAS.core_sources, cp::IMAS.core_profiles)\n\nCalculates the He-3 heating source from D-D fusion reactions, estimates energy transfer to ions and electrons, modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_T_source!","page":"API Reference","title":"IMAS.D_D_to_T_source!","text":"D_D_to_T_source!(cs::IMAS.core_sources, cp::IMAS.core_profiles)\n\nCalculates the T heating source from D-D fusion reactions, estimates energy transfer to ions and electrons, modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_T_to_He4_heating","page":"API Reference","title":"IMAS.D_T_to_He4_heating","text":"D_T_to_He4_power(cp1d::IMAS.core_profiles__profiles_1d; polarized_fuel_fraction::Real=0.0)\n\nVolumetric heating source of He4 particles coming from D-T reactions [W m⁻³]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_He3_heating","page":"API Reference","title":"IMAS.D_D_to_He3_heating","text":"D_D_to_He3_power(cp1d::IMAS.core_profiles__profiles_1d; polarized_fuel_fraction::Real=0.0)\n\nVolumetric heating source of He3 particles coming from D-D reactions [W m⁻³]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_T_heating","page":"API Reference","title":"IMAS.D_D_to_T_heating","text":"D_D_to_T_power(cp1d::IMAS.core_profiles__profiles_1d; polarized_fuel_fraction::Real=0.0)\n\nVolumetric heating source of T and H particles coming from D-D reactions [W m⁻³]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_T_to_He4_plasma_power","page":"API Reference","title":"IMAS.D_T_to_He4_plasma_power","text":"D_T_to_He4_plasma_power(cp1d::IMAS.core_profiles__profiles_1d; polarized_fuel_fraction::Real=0.0)\n\nTotal power in He4 from D-T reaction [W]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_He3_plasma_power","page":"API Reference","title":"IMAS.D_D_to_He3_plasma_power","text":"D_D_to_He3_plasma_power(cp1d::IMAS.core_profiles__profiles_1d)\n\nTotal power in He3 from D-D reaction [W]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.D_D_to_T_plasma_power","page":"API Reference","title":"IMAS.D_D_to_T_plasma_power","text":"D_D_to_T_plasma_power(cp1d::IMAS.core_profiles__profiles_1d)\n\nTotal power in T from D-D reaction [W]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fusion_plasma_power","page":"API Reference","title":"IMAS.fusion_plasma_power","text":"fusion_plasma_power(cp1d::IMAS.core_profiles__profiles_1d)\n\nCalculates the total fusion power in the plasma in [W]\n\nIf D+T plasma, then D+D is neglected\n\n\n\n\n\nfusion_plasma_power(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fusion_power","page":"API Reference","title":"IMAS.fusion_power","text":"fusion_power(cp1d::IMAS.core_profiles__profiles_1d)\n\nCalculates the total fusion power in [W]\n\nIf D+T plasma, then D+D is neglected\n\n\n\n\n\nfusion_power(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fusion_neutron_power","page":"API Reference","title":"IMAS.fusion_neutron_power","text":"fusion_neutron_power(cp1d::IMAS.core_profiles__profiles_1d)\n\nCalculates the total fusion power in the neutrons [W]\n\nIf D+T plasma, then D+D is neglected\n\n\n\n\n\nfusion_neutron_power(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-particles","page":"API Reference","title":"Physics particles","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.Particle\nIMAS.Rcoord\nIMAS.Particle\nIMAS.define_particles\nIMAS.find_flux\nIMAS.toroidal_intersection","category":"page"},{"location":"api/#IMAS.Particle","page":"API Reference","title":"IMAS.Particle","text":"x::T\ny::T\nz::T\nδvx::T\nδvy::T\nδvz::T\n\nCartesian coordinate system centered in (R=0, Z=0); R = sqrt(X^2 + Y^2) Z = Z\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.Rcoord","page":"API Reference","title":"IMAS.Rcoord","text":"Rcoord(p::Particle)\n\nReturn R coordinate of a Particle\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.define_particles","page":"API Reference","title":"IMAS.define_particles","text":"define_particles(eqt::IMAS.equilibrium__time_slice, psi::Vector{T}, source_1d::Vector{T}, N::Int) where {T<:Real}\n\nCreates a vector of particles from a 1D source (psi, source_1d) launching N particles.\n\nReturns also a scalar (Ipertrace) which is the intensity per trace.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_flux","page":"API Reference","title":"IMAS.find_flux","text":"find_flux(particles::Vector{Particle{T}}, I_per_trace::T, rwall::Vector{T}, zwall::Vector{T}, dr::T, dz::T; ns::Int=10, debug::Bool=false) where {T<:Real}\n\nReturns the flux at the wall of the quantity brought by particles, together with a vector of the surface elements on the wall (wall_s)\n\nI_per_trace is the intensity per trace\n\n(rwall, zwall) are the coordinates of the wall\n\ndr, dz are the grid sizes used for the 2d source generation\n\nns is the window size\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.toroidal_intersection","page":"API Reference","title":"IMAS.toroidal_intersection","text":"toroidal_intersection(r1::Real, z1::Real, r2::Real, z2::Real, x::Real, y::Real, z::Real, vx::Real, vy::Real, vz::Real, v2::Real, vz2::Real) -> Real\n\nCompute the time of intersection between a moving particle and a toroidal surface defined by two points (r1, z1) and (r2, z2).\n\nReturns the smallest positive time at which the particle intersects the surface segment. Returns Inf if no valid intersection occurs.\n\nr1, z1: Coordinates of the first endpoint of the toroidal surface segment.\nr2, z2: Coordinates of the second endpoint of the toroidal surface segment.\nx, y, z: Current position of the particle in Cartesian coordinates.\nvx, vy, vz: Velocity components of the particle.\nv2: Squared radial velocity component, vx^2 + vy^2.\nvz2: Squared z-velocity component, vz^2.\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-pedestal","page":"API Reference","title":"Physics pedestal","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.blend_core_edge\nIMAS.blend_core_edge_Hmode\nIMAS.blend_core_edge_EPED\nIMAS.blend_core_edge_Lmode\nIMAS.pedestal_finder","category":"page"},{"location":"api/#IMAS.blend_core_edge","page":"API Reference","title":"IMAS.blend_core_edge","text":"blend_core_edge(mode::Symbol, cp1d::IMAS.core_profiles__profiles_1d, summary_ped::IMAS.summary__local__pedestal, rho_nml::Real, rho_ped::Real; what::Symbol=:all)\n\nBlends Te, Ti, ne, and nis in coreprofiles with :Hmode or :L_mode like pedestal defined in summary IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.blend_core_edge_Hmode","page":"API Reference","title":"IMAS.blend_core_edge_Hmode","text":"blend_core_edge_Hmode(\n    profile::AbstractVector{<:Real},\n    rho::AbstractVector{<:Real},\n    ped_height::Real,\n    ped_width::Real,\n    tr_bound0::Real,\n    tr_bound1::Real\n)\n\nBlends the core profiles to the pedestal for H-mode profiles, making sure the Z's at trbound0 and trbound1 match the Z's from the original profile\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.blend_core_edge_EPED","page":"API Reference","title":"IMAS.blend_core_edge_EPED","text":"blend_core_edge_EPED(\n    profile::AbstractVector{<:Real},\n    rho::AbstractVector{<:Real},\n    ped_height::Real,\n    ped_width::Real,\n    nml_bound::Real,\n    ped_bound::Real;\n    expin::Real,\n    expout::Real\n)\n\nBlends the core and pedestal for given profile to match pedheight, pedwidth using nml_bound as blending boundary\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.blend_core_edge_Lmode","page":"API Reference","title":"IMAS.blend_core_edge_Lmode","text":"blend_core_edge_Lmode(\n    profile::AbstractVector{<:Real},\n    rho::AbstractVector{<:Real},\n    ped_height::Real,\n    ped_width::Real,\n    tr_bound0::Real,\n    tr_bound1::Real)\n\nBlends the core profiles to the pedestal for L-mode profiles, making sure the Z's at tr_bound1 matches the Z's from the original profile\n\nNOTE: pedwidth, trbound0, tr_bound1 are not utilized\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.pedestal_finder","page":"API Reference","title":"IMAS.pedestal_finder","text":"pedestal_finder(profile::Vector{T}, psi_norm::Vector{T}; do_plot::Bool=false) where {T<:Real}\n\nFinds the pedetal height and width using the EPED1 definition.\n\nNOTE: The width is limited to be between 0.01 and 0.1. If the width is at the 0.1 boundary it is likely an indication that the profile is not a typical H-mode profile. The height is the value of the profile evaluated at (1.0 - width)\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-pf_active","page":"API Reference","title":"Physics pf_active","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.area\nIMAS.volume\nIMAS.is_ohmic_coil\nIMAS.set_coils_function\nIMAS.outline","category":"page"},{"location":"api/#IMAS.is_ohmic_coil","page":"API Reference","title":"IMAS.is_ohmic_coil","text":"is_ohmic_coil(coil::IMAS.pf_active__coil)\n\nReturns true/false if coil is part of the OH\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.set_coils_function","page":"API Reference","title":"IMAS.set_coils_function","text":"set_coils_function(coils::IDSvector{<:IMAS.pf_active__coil}, R0::Float64; force::Bool=false)\n\nSetup the pf_active.coil[:].function\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-profiles","page":"API Reference","title":"Physics profiles","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.pressure_thermal\nIMAS.beta_tor_thermal_norm\nIMAS.beta_tor_norm\nIMAS.beta_tor\nIMAS.list_ions\nIMAS.ion_element!\nIMAS.ion_properties\nIMAS.binding_energy\nIMAS.atomic_mass\nIMAS.energy_thermal\nIMAS.energy_thermal_ped\nIMAS.tau_e_thermal\nIMAS.tau_e_h98\nIMAS.tau_e_ds03\nIMAS.bunit\nIMAS.greenwald_density\nIMAS.greenwald_fraction\nIMAS.greenwald_fraction\nIMAS.ne_line\nIMAS.ne_vol_avg\nIMAS.beta_tor\nIMAS.beta_n\nIMAS.pressure_avg_from_beta_n\nIMAS.Hmode_profiles\nIMAS.Lmode_profiles\nIMAS.A_effective\nIMAS.scaling_L_to_H_power\nIMAS.L_H_threshold\nIMAS.satisfies_h_mode_conditions\nIMAS.ITB\nIMAS.ITB_profile\nIMAS.species\nIMAS.is_quasi_neutral\nIMAS.enforce_quasi_neutrality!\nIMAS.lump_ions_as_bulk_and_impurity\nIMAS.zeff\nIMAS.avgZ\nIMAS.t_i_average\nIMAS.edge_profile","category":"page"},{"location":"api/#IMAS.pressure_thermal","page":"API Reference","title":"IMAS.pressure_thermal","text":"pressure_thermal(cp1d::IMAS.core_profiles__profiles_1d)\n\ncore_profiles thermal pressure\n\n\n\n\n\npressure_thermal(cp1de::IMAS.core_profiles__profiles_1d___electrons)\n\nelectrons thermal pressure\n\n\n\n\n\npressure_thermal(ion::IMAS.core_profiles__profiles_1d___ion)\n\nion thermal pressure\n\n\n\n\n\npressure_thermal(cp1di::IMAS.IDSvector{IMAS.core_profiles__profiles_1d___ion{T}}) where {T<:Real}\n\nthermal pressure for all ions\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.beta_tor_thermal_norm","page":"API Reference","title":"IMAS.beta_tor_thermal_norm","text":"beta_tor_thermal_norm(eq::IMAS.equilibrium, cp1d::IMAS.core_profiles__profiles_1d)\n\nNormalised toroidal beta from thermal pressure only, defined as 100 * betatorthermal * a[m] * B0 [T] / ip [MA]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.beta_tor_norm","page":"API Reference","title":"IMAS.beta_tor_norm","text":"beta_tor_norm(eq::IMAS.equilibrium, cp1d::IMAS.core_profiles__profiles_1d)\n\nNormalised toroidal beta from total pressure, defined as 100 * beta_tor * a[m] * B0 [T] / ip [MA]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.beta_tor","page":"API Reference","title":"IMAS.beta_tor","text":"beta_tor(eq::IMAS.equilibrium, cp1d::IMAS.core_profiles__profiles_1d; norm::Bool, thermal::Bool)\n\nToroidal beta, defined as the volume-averaged total perpendicular pressure divided by (B0^2/(2*mu0)), i.e. beta_toroidal = 2 mu0 int(p dV) / V / B0^2\n\n\n\n\n\nbeta_tor(pressure_average::Real, Bt::Real)\n\nCalculates Beta_tor from pressure and Bt\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.list_ions","page":"API Reference","title":"IMAS.list_ions","text":"list_ions(ct::IMAS.core_transport{T}, cp1d::IMAS.core_profiles__profiles_1d{T}) where {T<:Real}\n\nList ions in core_transport IDS,\n\n\n\n\n\nlist_ions(cs::IMAS.core_sources, cp1d::IMAS.core_profiles__profiles_1d)\n\nList ions in core_sources IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ion_element!","page":"API Reference","title":"IMAS.ion_element!","text":"ion_element!(\n    ion::Union{IMAS.core_profiles__profiles_1d___ion,IMAS.core_sources__source___profiles_1d___ion},\n    ion_symbol::Symbol)\n\nFills the ion.element structure with the a and z_n information, also updates the ion.label\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ion_properties","page":"API Reference","title":"IMAS.ion_properties","text":"ion_properties( ion_symbol::Symbol; fast::Bool=false)\n\nReturns named tuple with z_n, a, and label information of a given ion\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.binding_energy","page":"API Reference","title":"IMAS.binding_energy","text":"binding_energy(Z::Int, N::Int)\n\nReturn the estimate binding energy in MeV\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.atomic_mass","page":"API Reference","title":"IMAS.atomic_mass","text":"atomic_mass(Z::Int, N::Int)\n\nReturns the estimated nucleus mass including the estimated effect of binding energy\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.energy_thermal","page":"API Reference","title":"IMAS.energy_thermal","text":"energy_thermal(cp1d::IMAS.core_profiles__profiles_1d)\n\nCalculates the thermal stored energy\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.energy_thermal_ped","page":"API Reference","title":"IMAS.energy_thermal_ped","text":"energy_thermal_ped(cp1d::IMAS.core_profiles__profiles_1d, su::IMAS.summary)\n\nCalculates the pedestal contribution to the thermal stored energy by integrating over entire domain but with pedestal pressure in the core\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.tau_e_thermal","page":"API Reference","title":"IMAS.tau_e_thermal","text":"tau_e_thermal(cp1d::IMAS.core_profiles__profiles_1d, sources::IMAS.core_sources; subtract_radiation_losses::Bool=true)\n\nEvaluate thermal energy confinement time\n\n\n\n\n\ntau_e_thermal(dd::IMAS.dd; time0::Float64=dd.global_time, subtract_radiation_losses::Bool=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.tau_e_h98","page":"API Reference","title":"IMAS.tau_e_h98","text":"tau_e_h98(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, cs::IMAS.plot_core_sources; subtract_radiation_losses::Bool=true)\n\nH98y2 ITER elmy H-mode confinement time scaling\n\nNOTE: H98y2 uses aereal elongation\n\nSee Table 5 in https://iopscience.iop.org/article/10.1088/0029-5515/39/12/302/pdf and https://iopscience.iop.org/article/10.1088/0029-5515/48/9/099801/pdf for additional correction with plasma_volume\n\n\n\n\n\ntau_e_h98(dd::IMAS.dd; time0::Float64=dd.global_time, subtract_radiation_losses::Bool=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.tau_e_ds03","page":"API Reference","title":"IMAS.tau_e_ds03","text":"tau_e_ds03(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, cs::IMAS.core_sources; subtract_radiation_losses::Bool=true)\n\nPetty's 2003 confinement time scaling\n\nNOTE: Petty uses elongation at the separatrix and makes no distinction between volume and line-average density\n\n\n\n\n\ntau_e_ds03(dd::IMAS.dd; time0::Float64=dd.global_time, subtract_radiation_losses::Bool=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.bunit","page":"API Reference","title":"IMAS.bunit","text":"bunit(eqt1d::IMAS.equilibrium__time_slice___profiles_1d)\n\nCalculate bunit from equilibrium\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.greenwald_density","page":"API Reference","title":"IMAS.greenwald_density","text":"greenwald_density(eqt::IMAS.equilibrium__time_slice)\n\nSimple greenwald line-averaged density limit\n\n\n\n\n\ngreenwald_density(ip::T, minor_radius::T) where {T<:Real}\n\n\n\n\n\ngreenwald_density(dd::IMAS.dd)\n\n\n\n\n\ngreenwald_density(ps::IMAS.pulse_schedule; time0=global_time(ps))\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.greenwald_fraction","page":"API Reference","title":"IMAS.greenwald_fraction","text":"greenwald_fraction(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d)\n\nGreewald fraction\n\n\n\n\n\ngreenwald_fraction(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ne_line","page":"API Reference","title":"IMAS.ne_line","text":"ne_line(ps::IMAS.pulse_schedule; time0=global_time(ps))\n\nreturns neline from pulseschedule looking first in `pulseschedule.densitycontrol.neline.referenceand thenpulseschedule.densitycontrol.greenwald_fraction.reference`\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ne_vol_avg","page":"API Reference","title":"IMAS.ne_vol_avg","text":"ne_vol_avg(cp1d::IMAS.core_profiles__profiles_1d)\n\nVolume averaged electron density\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.beta_n","page":"API Reference","title":"IMAS.beta_n","text":"beta_n(beta_tor::Real, minor_radius::Real, Bt::Real, Ip::Real)\n\nCalculates BetaN from beta_tor\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.pressure_avg_from_beta_n","page":"API Reference","title":"IMAS.pressure_avg_from_beta_n","text":"pressure_avg_from_beta_n(beta_n::Real, minor_radius::Real, Bt::Real, Ip::Real)\n\nCalculates average pressure from BetaN\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Hmode_profiles","page":"API Reference","title":"IMAS.Hmode_profiles","text":"Hmode_profiles(edge::Real, ped::Real, core::Real, ngrid::Int, expin::Real, expout::Real, widthp::Real)\n\nGenerate H-mode density and temperature profiles evenly spaced in the radial coordinate\n\nedge: separatrix value\nped: pedestal value\ncore: on-axis value\nngrid: number of radial grid points\nexpin: inner core exponent for H-mode pedestal profile\nexpout: outer core exponent for H-mode pedestal profile\nwidth: width of pedestal\n\n\n\n\n\nHmode_profiles(edge::Real, ped::Real, ngrid::Int, expin::Real, expout::Real, widthp::Real)\n\nNOTE: The core value is allowed to float\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Lmode_profiles","page":"API Reference","title":"IMAS.Lmode_profiles","text":"Lmode_profiles(edge::Real, ped::Real, core::Real, ngrid::Int, expin::Real, expout::Real, widthp::Real)\n\nGenerate L-mode density and temperature profiles evenly spaced in the radial coordinate\n\nedge: separatrix value\nped: pedestal value\nngrid: number of radial grid points\nexpin: inner core exponent for H-mode pedestal profile\nexpout: outer core exponent for H-mode pedestal profile\nwidth: width of pedestal\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.A_effective","page":"API Reference","title":"IMAS.A_effective","text":"A_effective(cp1d::IMAS.core_profiles__profiles_1d{T}) where {T<:Real}\n\nA_effective towards L to H scaling see G. Birkenmeier et al 2022 Nucl. Fusion 62 086005\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.scaling_L_to_H_power","page":"API Reference","title":"IMAS.scaling_L_to_H_power","text":"scaling_L_to_H_power(A_effective::Real, ne_volume::Real, B0::Real, surface_area::Real)\n\nL to H transition power scaling for metal walls and isotope effect according to : G. Birkenmeier et al 2022 Nucl. Fusion 62 086005\n\ninputs in SI and returns power in W\n\n\n\n\n\nscaling_L_to_H_power(cp1d::IMAS.core_profiles__profiles_1d, eqt::IMAS.equilibrium__time_slice)\n\n\n\n\n\nscaling_L_to_H_power(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.L_H_threshold","page":"API Reference","title":"IMAS.L_H_threshold","text":"L_H_threshold(cs::IMAS.core_sources, cp1d::IMAS.core_profiles__profiles_1d, eqt::IMAS.equilibrium__time_slice)\n\nReturns ratio of Psol to Plh\n\n\n\n\n\nL_H_threshold(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.satisfies_h_mode_conditions","page":"API Reference","title":"IMAS.satisfies_h_mode_conditions","text":"satisfies_h_mode_conditions(dd::IMAS.dd)\n\nReturns true if the plasma is diverted, has positive triangularity, and Psol>Plh\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ITB","page":"API Reference","title":"IMAS.ITB","text":"ITB(rho0::T, width::T, height::T, rho::AbstractVector{T}) where {T<:Real}\n\ntanh profile to be added to existing profiles to model Internal Transport Barrier (ITB). The ITB is centered at rho0, with a full width of width and given height\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ITB_profile","page":"API Reference","title":"IMAS.ITB_profile","text":"ITB_profile(rho::AbstractVector{T}, input_profile::AbstractVector{T}, rho0::T, width::T, height_ratio::T) where {T<:Real}\n\nAdd ITB to existing profile. The ITB is centered at rho0, with a full width of width, and a height expressed as a ratio of the input_profile evaluated on axis\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.species","page":"API Reference","title":"IMAS.species","text":"species(cp1d::IMAS.core_profiles__profiles_1d; only_electrons_ions::Symbol=:all, only_thermal_fast::Symbol=:all)\n\nReturns species index and names (followed by \"fast\" if densityfast is present), for example:\n\n(0, :electrons)\n(0, :electrons_fast)\n(1, :DT)\n(2, :Kr83)\n(3, :He4)\n(1, :DT_fast)\n(3, :He4_fast)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.is_quasi_neutral","page":"API Reference","title":"IMAS.is_quasi_neutral","text":"is_quasi_neutral(cp1d::IMAS.core_profiles__profiles_1d; rtol::Float64=0.001)\n\nReturns true if quasi neutrality is satisfied within a relative tolerance\n\n\n\n\n\nis_quasi_neutral(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.enforce_quasi_neutrality!","page":"API Reference","title":"IMAS.enforce_quasi_neutrality!","text":"enforce_quasi_neutrality!(cp1d::IMAS.core_profiles__profiles_1d, species::Symbol)\n\nIf species is :electrons then updates electrons.density_thermal to meet quasi neutrality condtion.\n\nIf species is a ion species, it evaluates the difference in number of charges needed to reach quasineutrality, and assigns positive difference to target ion densitythermal species and negative difference to electrons densitythermal\n\nAlso, sets density to the original expression\n\n\n\n\n\nenforce_quasi_neutrality!(dd::IMAS.dd, species::Symbol)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.lump_ions_as_bulk_and_impurity","page":"API Reference","title":"IMAS.lump_ions_as_bulk_and_impurity","text":"lump_ions_as_bulk_and_impurity(ions::IMAS.IDSvector{<:IMAS.core_profiles__profiles_1d___ion}, rho_tor_norm::Vector{<:Real})\n\nChanges core_profiles.ion to 2 species, one bulk species (H, D, T) and one combined impurity species\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.zeff","page":"API Reference","title":"IMAS.zeff","text":"zeff(cp1d::IMAS.core_profiles__profiles_1d; temperature_dependent_ionization_state::Bool=true)\n\nReturns plasma effective charge\n\ntemperature_dependent_ionization_state evaluates Zeff with average ionization state of an ion at a given temperature\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.avgZ","page":"API Reference","title":"IMAS.avgZ","text":"avgZ(Z::Float64,Ti::T)::T\n\nReturns average ionization state of an ion at a given temperature\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.t_i_average","page":"API Reference","title":"IMAS.t_i_average","text":"t_i_average(cp1d::IMAS.core_profiles__profiles_1d)::Vector{<:Real}\n\nReturns the average ion temperature weighted by each species density over the total number of ion particles\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.edge_profile","page":"API Reference","title":"IMAS.edge_profile","text":"edge_profile(x::AbstractArray{<:Real}, x0::Real, T0::Real, T1::Real, alpha::Real)\n\nFunction for edge blending using exponential function\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-radiation","page":"API Reference","title":"Physics radiation","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.radiation_losses\nIMAS.bremsstrahlung_source!\nIMAS.rad_sync\nIMAS.synchrotron_source!\nIMAS.line_radiation_source!\nIMAS.adas21","category":"page"},{"location":"api/#IMAS.radiation_losses","page":"API Reference","title":"IMAS.radiation_losses","text":"radiation_losses(sources::IMAS.core_sources)\n\nEvaluate total plasma radiation losses [W] due to bremsstrahlung, synchrotron, and line radiation\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.bremsstrahlung_source!","page":"API Reference","title":"IMAS.bremsstrahlung_source!","text":"bremsstrahlung_source!(dd::IMAS.dd)\n\nCalculates approximate NRL Bremsstrahlung radiation source and modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.rad_sync","page":"API Reference","title":"IMAS.rad_sync","text":"rad_sync(ϵ::T, a::T, B0::T, ne::T, Te::T; wall_reflection_coefficient) where {T<:Real}\n\nSynchrotron radiation from Trubnikov, JETP Lett. 16 (1972) 25.0\n\nTranspiled from gacode/tgyro/src/tgyro_rad.f90\n\nSee also: Study of heat and synchrotron radiation transport in fusion tokamak plasmas (C. Villar 1997)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.synchrotron_source!","page":"API Reference","title":"IMAS.synchrotron_source!","text":"synchrotron_source!(dd::IMAS.dd; wall_reflection_coefficient=0.0)\n\nCalculates synchrotron radiation source and modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.line_radiation_source!","page":"API Reference","title":"IMAS.line_radiation_source!","text":"line_radiation_source!(dd::IMAS.dd)\n\nCalculates line radiation sources and modifies dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.adas21","page":"API Reference","title":"IMAS.adas21","text":"adas21(Te, name)\n\nNOTE: Te in [keV] and output is in [erg cm^3 / s]\n\nChebyshev polynomial fits to ADAS data\n\nTranspiled from gacode/tgyro/src/tgyro_rad.f90\nLz = Lz_line + Lz_continuum\nAurora follows the radiation nomenclature of ADAS (as described here), separating \"line\" and \"continuum\" radiation. Line radiation basically comes from ADF11 PLT files and continuum radiation comes from ADF11 PRB files. Bremsstrahlung is included in the continuum term.\nSupports [\"W\", \"Xe\", \"Mo\", \"Kr\", \"Ni\", \"Fe\", \"Ca\", \"Ar\", \"Si\", \"Al\", \"Ne\", \"F\", \"N\", \"O\", \"C\", \"Be\", \"He\", \"H\", \"T\", \"D\", \"DT\"]\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-sol","page":"API Reference","title":"Physics sol","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.OpenFieldLine\nIMAS.sol\nIMAS.find_levels_from_P\nIMAS.find_levels_from_wall\nIMAS.line_wall_2_wall\nIMAS.identify_strike_surface\nIMAS.divertor_totals_from_targets\nIMAS.Bpol\nIMAS.Bpol_omp\nIMAS.power_sol\nIMAS.widthSOL_loarte\nIMAS.widthSOL_sieglin\nIMAS.widthSOL_eich\nIMAS.q_pol_omp_eich\nIMAS.q_par_omp_eich\nIMAS.q_par_omp_eich\nIMAS.find_strike_points\nIMAS.find_strike_points!","category":"page"},{"location":"api/#IMAS.OpenFieldLine","page":"API Reference","title":"IMAS.OpenFieldLine","text":"r::Vector{Float64}\nz::Vector{Float64}\nBr::Vector{Float64}\nBz::Vector{Float64}\nBp::Vector{Float64}\nBt::Vector{Float64}\npitch::Vector{Float64}\ns::Vector{Float64}\nmidplane_index::Int\nstrike_angles::Vector{Float64}           # Angle in radiants between flux surface and the wall; poloidal angle\npitch_angles::Vector{Float64}            # Angle in radiants between B and Btoroidal; atan(Bp/Bt)\ngrazing_angles::Vector{Float64}          # Angle in radiants between B and the wall; grazing angle\ntotal_flux_expansion::Vector{Float64}    # Total flux expansion\npoloidal_flux_expansion::Vector{Float64} # Poloidal flux expansion\nwall_index::Vector{Int}                  # index in dd.wall where strike points intersect\n\n\n\n\n\n","category":"type"},{"location":"api/#IMAS.sol","page":"API Reference","title":"IMAS.sol","text":"sol(eqt::IMAS.equilibrium__time_slice, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}; levels::Union{Int,AbstractVector}=20, use_wall::Bool=true) where {T<:Real}\n\nReturns vectors of hfs and lfs OpenFieldLine\n\nIf levels is a vector, it has the values of psi from 0 to max psiwallmidplane. The function will modify levels of psi to introduce relevant sol surfaces\n\n\n\n\n\nsol(eqt::IMAS.equilibrium__time_slice, wall::IMAS.wall; levels::Union{Int,AbstractVector}=20, use_wall::Bool=true)\n\n\n\n\n\nsol(dd::IMAS.dd; levels::Union{Int,AbstractVector}=20, use_wall::Bool=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_levels_from_P","page":"API Reference","title":"IMAS.find_levels_from_P","text":"find_levels_from_P(\n    eqt::IMAS.equilibrium__time_slice,\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real},\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    r::Vector{<:Real},\n    q::Vector{<:Real},\n    levels::Int\n)\n\nFunction for the discretization of the poloidal flux ψ on the SOL, based on an hypotesis of OMP radial transport through arbitrary q(r) returns vector with level of ψ, vector with matching rmidplane and q. Discretization with even steps of P = integralsep^wal 2πrq(r)dr (same power in each flux tube)\n\n\n\n\n\nfind_levels_from_P(\n    eqt::IMAS.equilibrium__time_slice,\n    wall::IMAS.wall,\n    PSI_interpolant::Interpolations.AbstractInterpolation,\n    r::Vector{<:Real},\n    q::Vector{<:Real},\n    levels::Int\n)\n\n\n\n\n\nfind_levels_from_P(dd::IMAS.dd, r::Vector{<:Real}, q::Vector{<:Real}, levels::Int)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_levels_from_wall","page":"API Reference","title":"IMAS.find_levels_from_wall","text":"find_levels_from_wall(\n    eqt::IMAS.equilibrium__time_slice,\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real},\n    PSI_interpolant::Interpolations.AbstractInterpolation\n)\n\nFunction for that computes the value of psi at the points of the wall mesh in dd\n\n\n\n\n\nfind_levels_from_wall(eqt::IMAS.equilibrium__time_slice, wall::IMAS.wall, PSI_interpolant::Interpolations.AbstractInterpolation)\n\n\n\n\n\nfind_levels_from_wall(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.line_wall_2_wall","page":"API Reference","title":"IMAS.line_wall_2_wall","text":"line_wall_2_wall(r::AbstractVector{T}, z::AbstractVector{T}, wall_r::AbstractVector{T}, wall_z::AbstractVector{T}, RA::Real, ZA::Real) where {T<:Real}\n\nReturns r, z coordinates of open field line contained within wall, as well as angles of incidence at the strike locations\n\nRA and ZA are the coordinate of the magnetic axis\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.identify_strike_surface","page":"API Reference","title":"IMAS.identify_strike_surface","text":"identify_strike_surface(ofl::OpenFieldLine, divertors::IMAS.divertors)\n\nReturns vector of two tuples with three integers each, identifying the indexes of the divertor/target/tile that the field line intersections\n\nWhen a field line does not intersect a divertor target, then the tuple returned is (0, 0, 0)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.divertor_totals_from_targets","page":"API Reference","title":"IMAS.divertor_totals_from_targets","text":"divertor_totals_from_targets(divertor::IMAS.divertors__divertor, field::Symbol)\n\nReturns time dependent vectors of :field summed over all divertor targets\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Bpol","page":"API Reference","title":"IMAS.Bpol","text":"Bpol(a::T, κ::T, Ip::T) where {T<:Real}\n\nAverage poloidal magnetic field magnitude\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.Bpol_omp","page":"API Reference","title":"IMAS.Bpol_omp","text":"Bpol_omp(eqt::IMAS.equilibrium__time_slice)\n\nPoloidal magnetic field magnitude evaluated at the outer midplane\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.power_sol","page":"API Reference","title":"IMAS.power_sol","text":"power_sol(core_sources::IMAS.core_sources, cp1d::IMAS.core_profiles__profiles_1d)\n\nTotal power coming out of the SOL [W]\n\nNOTE: This function returns 1.0 [W] if power is less than that so that SOL quantities remain finite\n\n\n\n\n\npower_sol(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.widthSOL_loarte","page":"API Reference","title":"IMAS.widthSOL_loarte","text":"widthSOL_loarte(B0::T, q95::T, Psol::T) where {T<:Real}\n\nReturns midplane power decay length λ_q in meters\n\n\n\n\n\nwidthSOL_loarte(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, core_sources::IMAS.core_sources)\n\n\n\n\n\nwidthSOL_loarte(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.widthSOL_sieglin","page":"API Reference","title":"IMAS.widthSOL_sieglin","text":"widthSOL_sieglin(R0::T, a::T, Bpol_omp::T, Psol::T, ne_ped::T) where {T<:Real}\n\nReturns integral power decay length λ_int in meters Eich scaling(NF 53 093031) & B. Sieglin PPCF 55 (2013) 124039\n\n\n\n\n\nwidthSOL_sieglin(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, core_sources::IMAS.core_sources)\n\n\n\n\n\nwidthSOL_sieglin(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.widthSOL_eich","page":"API Reference","title":"IMAS.widthSOL_eich","text":"widthSOL_eich(R0::T, a::T, Bpol_omp::T, Psol::T) where {T<:Real}\n\nReturns midplane power decay length λ_q in meters\n\nEich scaling (NF 53 093031)\n\n\n\n\n\nwidthSOL_eich(eqt::IMAS.equilibrium__time_slice, Psol::Real)\n\n\n\n\n\nwidthSOL_eich(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, core_sources::IMAS.core_sources)\n\n\n\n\n\nwidthSOL_eich(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.q_pol_omp_eich","page":"API Reference","title":"IMAS.q_pol_omp_eich","text":"q_pol_omp_eich(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, core_sources::IMAS.core_sources)\n\nPoloidal heat flux [W/m²] at the outer midplane based on Eich λ_q\n\n\n\n\n\nq_pol_omp_eich(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.q_par_omp_eich","page":"API Reference","title":"IMAS.q_par_omp_eich","text":"q_par_omp_eich(eqt::IMAS.equilibrium__time_slice, cp1d::IMAS.core_profiles__profiles_1d, core_sources::IMAS.core_sources)\n\nParallel heat flux [W/m²] at the outer midplane based on Eich λ_q\n\n\n\n\n\nq_par_omp_eich(dd::IMAS.dd)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_strike_points","page":"API Reference","title":"IMAS.find_strike_points","text":"find_strike_points(pr::AbstractVector{T1}, pz::AbstractVector{T1}, wall_r::AbstractVector{T2}, wall_z::AbstractVector{T2}) where {T1<:Real, T2<:Real}Real}\n\nFinds strike points and angles of incidence between two paths\n\n\n\n\n\nfind_strike_points(\n    eqt::IMAS.equilibrium__time_slice{T1},\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{2},\n    psi_first_open::Union{T3,Nothing};\n    strike_surfaces_r::AbstractVector{T4}=wall_r,\n    strike_surfaces_z::AbstractVector{T4}=wall_z,\n    private_flux_regions::Bool=false) where {T1<:Real,T2<:Real,T3<:Real,T4<:Real}\n\nFinds equilibrium strike points and angle of incidence between wall and strike leg\n\n\n\n\n\nfind_strike_points(\n    eqt::IMAS.equilibrium__time_slice{T1},\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{T2},\n    psi_first_open::Union{T3,Nothing},\n    dv::IMAS.divertors{T1};\n    private_flux_regions::Bool=false) where {T1<:Real,T2<:Real,T3<:Real}\n\nReturn strike points location in the divertors\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.find_strike_points!","page":"API Reference","title":"IMAS.find_strike_points!","text":"find_strike_points!(\n    eqt::IMAS.equilibrium__time_slice{T1},\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{T2},\n    psi_first_open::Union{T3,Nothing},\n    dv::IMAS.divertors{T1};\n    private_flux_regions::Bool=false,\n    in_place::Bool=true) where {T1<:Real,T2<:Real,T3<:Real}\n\nAdds strike points location to equilibrium IDS and the tiltanglepol in the divertors IDS\n\n\n\n\n\nfind_strike_points!(\n    eqt::IMAS.equilibrium__time_slice{T1},\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{T2},\n    psi_first_open::T3) where {T1<:Real,T2<:Real,T3<:Real}\n\n\n\n\n\nfind_strike_points!(\n    eqt::IMAS.equilibrium__time_slice{T1},\n    wall_r::AbstractVector{T2},\n    wall_z::AbstractVector{T2},\n    psi_first_open::Nothing) where {T1<:Real,T2<:Real}\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-sources","page":"API Reference","title":"Physics sources","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.fusion_source!\nIMAS.collisional_exchange_source!\nIMAS.ohmic_source!\nIMAS.bootstrap_source!\nIMAS.sources!\nIMAS.time_derivative_source!\nIMAS.total_mass_density\nIMAS.total_power_source\nIMAS.total_power_time\nIMAS.retain_source\nIMAS.retain_source\nIMAS.total_radiation_sources\nIMAS.new_source","category":"page"},{"location":"api/#IMAS.fusion_source!","page":"API Reference","title":"IMAS.fusion_source!","text":"fusion_source!(cs::IMAS.core_sources, cp::IMAS.core_profiles; DD_fusion::Bool=false)\n\nCalculates fusion source from D-T and D-D reactions and adds them to dd.core_sources\n\nIf D+T plasma, then D+D is neglected\n\nIf D+D plasma fusion is included depending on DD_fusion switch\n\n\n\n\n\nfusion_source!(dd::IMAS.dd; DD_fusion::Bool=false)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.collisional_exchange_source!","page":"API Reference","title":"IMAS.collisional_exchange_source!","text":"collisional_exchange_source!(dd::IMAS.dd)\n\nCalculates collisional exchange source and adds it to dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.ohmic_source!","page":"API Reference","title":"IMAS.ohmic_source!","text":"ohmic_source!(dd::IMAS.dd)\n\nCalculates the ohmic source from data in dd.core_profiles and adds it to dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.bootstrap_source!","page":"API Reference","title":"IMAS.bootstrap_source!","text":"bootstrap_source!(dd::IMAS.dd)\n\nCalculates the bootsrap current source from data in dd.core_profiles and adds it to dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.sources!","page":"API Reference","title":"IMAS.sources!","text":"sources!(dd::IMAS.dd; bootstrap::Bool=true, ohmic::Bool=true, DD_fusion::Bool=false)\n\nCalculates intrisic sources and sinks and adds them to dd.core_sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.time_derivative_source!","page":"API Reference","title":"IMAS.time_derivative_source!","text":"time_derivative_source!(cp1d_new::IMAS.core_profiles__profiles_1d, cp1d_old::IMAS.core_profiles__profiles_1d, Δt::Float64, R_flux_avg::Vector)\n\nCalculates the time dependent sources and sinks and adds them to dd.core_sources\n\nThese are the ∂/∂t term in the transport equations.\n\n\n\n\n\ntime_derivative_source!(dd::IMAS.dd, cp1d_old::IMAS.core_profiles__profiles_1d, Δt::Float64)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.total_mass_density","page":"API Reference","title":"IMAS.total_mass_density","text":"total_mass_density(cp1d::IMAS.core_profiles__profiles_1d)\n\nFinds the total mass density [kg/m^-3]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.total_power_source","page":"API Reference","title":"IMAS.total_power_source","text":"total_power_source(source::IMAS.core_sources__source___profiles_1d)\n\nReturns the total power (electron + ion) for a single source\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.total_power_time","page":"API Reference","title":"IMAS.total_power_time","text":"total_power_time(core_sources::IMAS.core_sources, include_indexes::Vector{<:Integer})\n\nReturns tuple of vectors with the total thermal power and time_array for given set of sources selected by identifier.index\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.retain_source","page":"API Reference","title":"IMAS.retain_source","text":"retain_source(source::IMAS.core_sources__source, all_indexes::Vector{Int}, include_indexes::Vector{Int}, exclude_indexes::Vector{Int})::Bool\n\nFunction that decides whether a source should be kept or ignored when totaling sources\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.total_radiation_sources","page":"API Reference","title":"IMAS.total_radiation_sources","text":"total_radiation_sources(dd::IMAS.dd; time0::Float64=dd.global_time, kw...)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.new_source","page":"API Reference","title":"IMAS.new_source","text":"new_source(\n    source::IMAS.core_sources__source,\n    index::Int,\n    name::String,\n    rho::Union{AbstractVector,AbstractRange},\n    volume::Union{AbstractVector,AbstractRange},\n    area::Union{AbstractVector,AbstractRange};\n    electrons_energy::Union{AbstractVector,Missing}=missing,\n    electrons_power_inside::Union{AbstractVector,Missing}=missing,\n    total_ion_energy::Union{AbstractVector,Missing}=missing,\n    total_ion_power_inside::Union{AbstractVector,Missing}=missing,\n    electrons_particles::Union{AbstractVector,Missing}=missing,\n    electrons_particles_inside::Union{AbstractVector,Missing}=missing,\n    j_parallel::Union{AbstractVector,Missing}=missing,\n    current_parallel_inside::Union{AbstractVector,Missing}=missing,\n    momentum_tor::Union{AbstractVector,Missing}=missing,\n    torque_tor_inside::Union{AbstractVector,Missing}=missing\n)\n\nPopulates the IMAS.core_sources__source with given heating, particle, current, momentun profiles\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-technology","page":"API Reference","title":"Physics technology","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.coil_technology\nIMAS.fraction_conductor\nIMAS.GAMBL_blanket","category":"page"},{"location":"api/#IMAS.coil_technology","page":"API Reference","title":"IMAS.coil_technology","text":"coil_technology(technology::Symbol, coil_type::Symbol)\n\nReturn coil parameters from technology and coil type [:oh, :tf, :pf_active]\"\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.fraction_conductor","page":"API Reference","title":"IMAS.fraction_conductor","text":"fraction_conductor(coil_tech::Union{IMAS.build__pf_active__technology,IMAS.build__oh__technology,IMAS.build__tf__technology})\n\nreturns the fraction of (super)conductor in a coil technology\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.GAMBL_blanket","page":"API Reference","title":"IMAS.GAMBL_blanket","text":"GAMBL_blanket(bm::IMAS.blanket__module)\n\nDefine layers for the dd.blanket.module for a GAMBL type blanket technology\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-tf","page":"API Reference","title":"Physics tf","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.tf_ripple\nIMAS.R_tf_ripple\nIMAS.top_view_outline","category":"page"},{"location":"api/#IMAS.tf_ripple","page":"API Reference","title":"IMAS.tf_ripple","text":"tf_ripple(r, R_tf::Real, N_tf::Integer)\n\nEvaluate fraction of toroidal magnetic field ripple at r [m] generated from N_tf toroidal field coils with outer leg at R_tf [m]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.R_tf_ripple","page":"API Reference","title":"IMAS.R_tf_ripple","text":"R_tf_ripple(r, ripple::Real, N_tf::Integer)\n\nEvaluate location of toroidal field coils outer leg R_tf[m] at whichN_tftoroidal field coils generate a given fraction of toroidal magnetic field ripple atr` [m]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.top_view_outline","page":"API Reference","title":"IMAS.top_view_outline","text":"top_view_outline(tf::IMAS.build__tf, n::Int=1; cutouts::Bool=false)\n\nreturns x,y outline (top view) of the n'th TF coil\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-thermal-loads","page":"API Reference","title":"Physics thermal loads","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.particle_heat_flux","category":"page"},{"location":"api/#IMAS.particle_heat_flux","page":"API Reference","title":"IMAS.particle_heat_flux","text":"particle_heat_flux(\n    eqt::IMAS.equilibrium__time_slice,\n    SOL::OrderedCollections.OrderedDict{Symbol,Vector{OpenFieldLine}},\n    wall_r::AbstractVector{<:Real},\n    wall_z::AbstractVector{<:Real},\n    r::Vector{<:Real},\n    q::Vector{<:Real};\n    merge_wall::Bool=true)\n\nComputes the heat flux on the wall due to the influx of charged particles, using the magnetic equilibrium, the Scrape Off-Layer, the wall, and an hypothesis of the decay of the parallel heat flux at the OMP\n\n\n\n\n\n","category":"function"},{"location":"api/#Physics-transport","page":"API Reference","title":"Physics transport","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.profile_from_z_transport\nIMAS.total_fluxes","category":"page"},{"location":"api/#IMAS.profile_from_z_transport","page":"API Reference","title":"IMAS.profile_from_z_transport","text":"profile_from_z_transport(\n    profile_old::AbstractVector{<:Real},\n    rho::AbstractVector{<:Real},\n    transport_grid::AbstractVector{<:Real},\n    z_transport_grid::AbstractVector{<:Real},\n    rho_ped::Real=0.0)\n\nUpdates profileold with the scale lengths given by ztransport_grid\n\nIf rho_ped > transport_grid[end] then scale-length is linearly interpolated between transport_grid[end] and rho_ped if rho_ped < transport_grid[end] then scale-length then boundary condition is at transport_grid[end]\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.total_fluxes","page":"API Reference","title":"IMAS.total_fluxes","text":"total_fluxes(core_transport::IMAS.core_transport{T}, rho_total_fluxes::AbstractVector{<:Real}; time0::Float64=global_time(core_transport)) where {T<:Real}\n\nSums up all the fluxes and returns it as a core_transport.model IDS\n\n\n\n\n\ntotal_fluxes(dd::IMAS.dd, rho_total_fluxes::AbstractVector{<:Real}=dd.core_profiles.profiles_1d[].grid.rho_tor_norm; time0::Float64=dd.global_time)\n\n\n\n\n\n","category":"function"},{"location":"api/#Plot","page":"API Reference","title":"Plot","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.help_plot\nIMAS.help_plot!","category":"page"},{"location":"api/#IMAS.help_plot","page":"API Reference","title":"IMAS.help_plot","text":"help_plot(args...; kw...)\n\nPrints plotting arguments for object that are part of IMAS.\n\nCall help_plot(...) just like you would plot(...)\n\nReturns the plot.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMAS.help_plot!","page":"API Reference","title":"IMAS.help_plot!","text":"help_plot!(args...; kw...)\n\nPrints plotting arguments for object that are part of IMAS.\n\nCall help_plot!(...) just like you would plot!(...)\n\nReturns the plot.\n\n\n\n\n\n","category":"function"},{"location":"api/#Real","page":"API Reference","title":"Real","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.fill!","category":"page"},{"location":"api/#Base.fill!","page":"API Reference","title":"Base.fill!","text":"fill!(ids_new::IDS{<:T1}, ids::IDS{<:T2}, field::Symbol) where {T1<:Measurement{<:Real},T2<:Real}\n\nFunction used to map fields in IDS{T} to IDS{Measurement{T}}\n\n\n\n\n\nfill!(ids_new::IDS{<:T1}, ids::IDS{<:T2}, field::Symbol) where {T1<:Real,T2<:Measurement{<:Real}}\n\nFunction used to map fields in IDS{Measurement{T}} to IDS{T}\n\n\n\n\n\n","category":"function"},{"location":"api/#get-from","page":"API Reference","title":"get from","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"IMAS.get_from","category":"page"},{"location":"api/#IMAS.get_from","page":"API Reference","title":"IMAS.get_from","text":"get_from(dd::IMAS.dd, what::Symbol, from_where::Symbol; time0::Float64=dd.global_time)\n\nIMAS stores the same physical quantities in different IDSs, and get_from() abstracts away the details of which IDS to access, depending on the requested quantity (what) and the specified source (from_where). This is generally useful when coupling different codes/modules/actors.\n\nSupported quantities for what:\n\n:ip          - Plasma current [A]\nPossible sources (from_where): :equilibrium, :core_profiles, :pulse_schedule\n:vacuum_r0_b0- Vacuum magnetic field parameters (major radius r0 [m], toroidal field b0 [T])\nPossible sources (from_where): :equilibrium, :pulse_schedule\n:vloop       - Loop voltage [V]\nPossible sources (from_where): :equilibrium, :core_profiles, :pulse_schedule, :controllers__ip\n:βn          - Normalized beta [-]\nPossible sources (from_where): :equilibrium, :core_profiles\n:ne_ped      - Electron density at the pedestal [m^-3]\nPossible sources (from_where): :core_profiles, :summary, :pulse_schedule\n:zeff_ped    - Effective charge at the pedestal [-]\nPossible sources (from_where): :core_profiles, :summary, :pulse_schedule\n\ntime0 defines the time point at which to retrieve the value, default is dd.global_time.\n\nReturns the requested physical quantity from the specified location in the IMAS data structure.\n\n\n\n\n\n","category":"function"},{"location":"license/","page":"License","title":"License","text":"                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/","category":"page"},{"location":"license/","page":"License","title":"License","text":"TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION","category":"page"},{"location":"license/","page":"License","title":"License","text":"Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or     Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices     stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works     that You distribute, all copyright, patent, trademark, and     attribution notices from the Source form of the Work,     excluding those notices that do not pertain to any part of     the Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its     distribution, then any Derivative Works that You distribute must     include a readable copy of the attribution notices contained     within such NOTICE file, excluding those notices that do not     pertain to any part of the Derivative Works, in at least one     of the following places: within a NOTICE text file distributed     as part of the Derivative Works; within the Source form or     documentation, if provided along with the Derivative Works; or,     within a display generated by the Derivative Works, if and     wherever such third-party notices normally appear. The contents     of the NOTICE file are for informational purposes only and     do not modify the License. You may add Your own attribution     notices within Derivative Works that You distribute, alongside     or as an addendum to the NOTICE text from the Work, provided     that such additional attribution notices cannot be construed     as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.","category":"page"},{"location":"license/","page":"License","title":"License","text":"END OF TERMS AND CONDITIONS","category":"page"},{"location":"license/","page":"License","title":"License","text":"APPENDIX: How to apply the Apache License to your work.","category":"page"},{"location":"license/","page":"License","title":"License","text":"  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.","category":"page"},{"location":"license/","page":"License","title":"License","text":"Copyright 2024 General Atomics","category":"page"},{"location":"license/","page":"License","title":"License","text":"Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at","category":"page"},{"location":"license/","page":"License","title":"License","text":"   http://www.apache.org/licenses/LICENSE-2.0","category":"page"},{"location":"license/","page":"License","title":"License","text":"Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.","category":"page"},{"location":"expressions/#Expressions","page":"Expressions","title":"Expressions","text":"","category":"section"},{"location":"expressions/","page":"Expressions","title":"Expressions","text":"IMAS.onetime_expressions\nIMAS.dynamic_expressions","category":"page"},{"location":"expressions/#IMAS.onetime_expressions","page":"Expressions","title":"IMAS.onetime_expressions","text":"onetime_expressions = Dict{String,Function}()\n\nExpressions that are frozen after first evaluation\n\ncore_profiles.profiles_1d[:].grid.area\ncore_profiles.profiles_1d[:].grid.psi\ncore_profiles.profiles_1d[:].grid.psi_norm\ncore_profiles.profiles_1d[:].grid.surface\ncore_profiles.profiles_1d[:].grid.volume\ncore_sources.source[:].profiles_1d[:].grid.area\ncore_sources.source[:].profiles_1d[:].grid.psi\ncore_sources.source[:].profiles_1d[:].grid.psi_norm\ncore_sources.source[:].profiles_1d[:].grid.surface\ncore_sources.source[:].profiles_1d[:].grid.volume\ncore_transport.model[:].profiles_1d[:].grid_d.rho_tor_norm\ncore_transport.model[:].profiles_1d[:].grid_flux.area\ncore_transport.model[:].profiles_1d[:].grid_flux.psi\ncore_transport.model[:].profiles_1d[:].grid_flux.psi_norm\ncore_transport.model[:].profiles_1d[:].grid_flux.rho_tor_norm\ncore_transport.model[:].profiles_1d[:].grid_flux.surface\ncore_transport.model[:].profiles_1d[:].grid_flux.volume\n\n\n\n\n\n","category":"constant"},{"location":"expressions/#IMAS.dynamic_expressions","page":"Expressions","title":"IMAS.dynamic_expressions","text":"dynamic_expressions = Dict{String,Function}()\n\nExpressions\n\nbalance_of_plant.Q_plant\nbalance_of_plant.power_electric_net\nbalance_of_plant.power_electric_plant_operation.total_power\nbuild.layer[:].area\nbuild.layer[:].end_radius\nbuild.layer[:].identifier\nbuild.layer[:].outline.r\nbuild.layer[:].outline.z\nbuild.layer[:].shape\nbuild.layer[:].shape_parameters\nbuild.layer[:].start_radius\nbuild.layer[:].volume\nbuild.tf.ripple\nbuild.tf.wedge_thickness\ncore_profiles.global_quantities.beta_tor_norm\ncore_profiles.global_quantities.current_bootstrap\ncore_profiles.global_quantities.current_non_inductive\ncore_profiles.global_quantities.current_ohmic\ncore_profiles.global_quantities.ip\ncore_profiles.global_quantities.v_loop\ncore_profiles.profiles_1d[:].conductivity_parallel\ncore_profiles.profiles_1d[:].electrons.density\ncore_profiles.profiles_1d[:].electrons.density_fast\ncore_profiles.profiles_1d[:].electrons.pressure\ncore_profiles.profiles_1d[:].electrons.pressure_fast_parallel\ncore_profiles.profiles_1d[:].electrons.pressure_fast_perpendicular\ncore_profiles.profiles_1d[:].electrons.pressure_thermal\ncore_profiles.profiles_1d[:].ion[:].density\ncore_profiles.profiles_1d[:].ion[:].density_fast\ncore_profiles.profiles_1d[:].ion[:].density_thermal\ncore_profiles.profiles_1d[:].ion[:].pressure\ncore_profiles.profiles_1d[:].ion[:].pressure_fast_parallel\ncore_profiles.profiles_1d[:].ion[:].pressure_fast_perpendicular\ncore_profiles.profiles_1d[:].ion[:].pressure_thermal\ncore_profiles.profiles_1d[:].ion[:].z_ion\ncore_profiles.profiles_1d[:].j_bootstrap\ncore_profiles.profiles_1d[:].j_non_inductive\ncore_profiles.profiles_1d[:].j_ohmic\ncore_profiles.profiles_1d[:].j_tor\ncore_profiles.profiles_1d[:].j_total\ncore_profiles.profiles_1d[:].pressure\ncore_profiles.profiles_1d[:].pressure_ion_total\ncore_profiles.profiles_1d[:].pressure_parallel\ncore_profiles.profiles_1d[:].pressure_perpendicular\ncore_profiles.profiles_1d[:].pressure_thermal\ncore_profiles.profiles_1d[:].t_i_average\ncore_profiles.profiles_1d[:].time\ncore_profiles.profiles_1d[:].zeff\ncore_sources.source[:].profiles_1d[:].current_parallel_inside\ncore_sources.source[:].profiles_1d[:].electrons.energy\ncore_sources.source[:].profiles_1d[:].electrons.particles\ncore_sources.source[:].profiles_1d[:].electrons.particles_inside\ncore_sources.source[:].profiles_1d[:].electrons.power_inside\ncore_sources.source[:].profiles_1d[:].ion[:].particles\ncore_sources.source[:].profiles_1d[:].ion[:].particles_inside\ncore_sources.source[:].profiles_1d[:].j_parallel\ncore_sources.source[:].profiles_1d[:].momentum_tor\ncore_sources.source[:].profiles_1d[:].time\ncore_sources.source[:].profiles_1d[:].torque_tor_inside\ncore_sources.source[:].profiles_1d[:].total_ion_energy\ncore_sources.source[:].profiles_1d[:].total_ion_power_inside\ncore_transport.model[:].profiles_1d[:].time\ncosting.cost_decommissioning.cost\ncosting.cost_decommissioning.system[:].cost\ncosting.cost_direct_capital.cost\ncosting.cost_direct_capital.system[:].cost\ncosting.cost_operations.system[:].yearly_cost\ncosting.cost_operations.yearly_cost\ndivertors.divertor[:].power_black_body.data\ndivertors.divertor[:].power_black_body.time\ndivertors.divertor[:].power_conducted.data\ndivertors.divertor[:].power_conducted.time\ndivertors.divertor[:].power_convected.data\ndivertors.divertor[:].power_convected.time\ndivertors.divertor[:].power_currents.data\ndivertors.divertor[:].power_currents.time\ndivertors.divertor[:].power_incident.data\ndivertors.divertor[:].power_incident.time\ndivertors.divertor[:].power_neutrals.data\ndivertors.divertor[:].power_radiated.data\ndivertors.divertor[:].power_radiated.time\ndivertors.divertor[:].power_recombination_neutrals.data\ndivertors.divertor[:].power_recombination_neutrals.time\ndivertors.divertor[:].power_recombination_plasma.data\ndivertors.divertor[:].power_recombination_plasma.time\nequilibrium.time_slice[:].boundary.elongation\nequilibrium.time_slice[:].boundary.elongation_lower\nequilibrium.time_slice[:].boundary.elongation_upper\nequilibrium.time_slice[:].boundary.geometric_axis.r\nequilibrium.time_slice[:].boundary.geometric_axis.z\nequilibrium.time_slice[:].boundary.minor_radius\nequilibrium.time_slice[:].boundary.squareness\nequilibrium.time_slice[:].boundary.squareness_lower_inner\nequilibrium.time_slice[:].boundary.squareness_lower_outer\nequilibrium.time_slice[:].boundary.squareness_upper_inner\nequilibrium.time_slice[:].boundary.squareness_upper_outer\nequilibrium.time_slice[:].boundary.triangularity\nequilibrium.time_slice[:].boundary.triangularity_lower\nequilibrium.time_slice[:].boundary.triangularity_upper\nequilibrium.time_slice[:].global_quantities.energy_mhd\nequilibrium.time_slice[:].global_quantities.magnetic_axis.b_field_tor\nequilibrium.time_slice[:].global_quantities.magnetic_axis.r\nequilibrium.time_slice[:].global_quantities.magnetic_axis.z\nequilibrium.time_slice[:].global_quantities.psi_axis\nequilibrium.time_slice[:].global_quantities.psi_boundary\nequilibrium.time_slice[:].global_quantities.q_95\nequilibrium.time_slice[:].global_quantities.q_axis\nequilibrium.time_slice[:].global_quantities.q_min\nequilibrium.time_slice[:].global_quantities.vacuum_toroidal_field.b0\nequilibrium.time_slice[:].global_quantities.vacuum_toroidal_field.r0\nequilibrium.time_slice[:].profiles_1d.darea_dpsi\nequilibrium.time_slice[:].profiles_1d.darea_drho_tor\nequilibrium.time_slice[:].profiles_1d.dpressure_dpsi\nequilibrium.time_slice[:].profiles_1d.dpsi_drho_tor\nequilibrium.time_slice[:].profiles_1d.dvolume_dpsi\nequilibrium.time_slice[:].profiles_1d.dvolume_drho_tor\nequilibrium.time_slice[:].profiles_1d.geometric_axis.r\nequilibrium.time_slice[:].profiles_1d.geometric_axis.z\nequilibrium.time_slice[:].profiles_1d.j_parallel\nequilibrium.time_slice[:].profiles_1d.j_tor\nequilibrium.time_slice[:].profiles_1d.psi_norm\nequilibrium.time_slice[:].profiles_2d[:].b_field_r\nequilibrium.time_slice[:].profiles_2d[:].b_field_tor\nequilibrium.time_slice[:].profiles_2d[:].b_field_z\nequilibrium.time_slice[:].profiles_2d[:].j_tor\nequilibrium.time_slice[:].profiles_2d[:].r\nequilibrium.time_slice[:].profiles_2d[:].z\nequilibrium.time_slice[:].time\npulse_schedule.tf.b_field_tor_vacuum.reference\npulse_schedule.tf.b_field_tor_vacuum_r.reference\npulse_schedule.tf.r0\npulse_schedule.tf.time\npulse_schedule.time\nstability.all_cleared\nstability.model[:].cleared\nsummary.fusion.power.value\nsummary.global_quantities.beta_pol_mhd.value\nsummary.global_quantities.beta_tor.value\nsummary.global_quantities.beta_tor_mhd.value\nsummary.global_quantities.beta_tor_norm.value\nsummary.global_quantities.beta_tor_norm_mhd.value\nsummary.global_quantities.beta_tor_thermal_norm.value\nsummary.global_quantities.current_bootstrap.value\nsummary.global_quantities.current_non_inductive.value\nsummary.global_quantities.current_ohm.value\nsummary.global_quantities.energy_thermal.value\nsummary.global_quantities.h_98.value\nsummary.global_quantities.ip.value\nsummary.global_quantities.tau_energy.value\nsummary.global_quantities.tau_energy_98.value\nsummary.heating_current_drive.power_launched_ec.value\nsummary.heating_current_drive.power_launched_ic.value\nsummary.heating_current_drive.power_launched_lh.value\nsummary.heating_current_drive.power_launched_nbi.value\nsummary.heating_current_drive.power_launched_total.value\nsummary.local.magnetic_axis.n_e.value\nsummary.local.magnetic_axis.t_e.value\nsummary.local.magnetic_axis.t_i_average.value\nsummary.local.magnetic_axis.zeff.value\nsummary.local.separatrix.n_e.value\nsummary.local.separatrix.t_e.value\nsummary.local.separatrix.t_i_average.value\nsummary.local.separatrix.zeff.value\nsummary.volume_average.n_e.value\nsummary.volume_average.t_e.value\nsummary.volume_average.t_i_average.value\nsummary.volume_average.zeff.value\n\n\n\n\n\n","category":"constant"},{"location":"#IMAS.jl","page":"IMAS.jl","title":"IMAS.jl","text":"","category":"section"},{"location":"#Physics-and-math-routines","page":"IMAS.jl","title":"Physics and math routines","text":"","category":"section"},{"location":"","page":"IMAS.jl","title":"IMAS.jl","text":"IMAS.jl incorporates a comprehensive set of mathematical, physics, and engineering routines. This eliminates the need for individual packages to re-implement these routines.","category":"page"},{"location":"#Dynamic-expressions","page":"IMAS.jl","title":"Dynamic expressions","text":"","category":"section"},{"location":"","page":"IMAS.jl","title":"IMAS.jl","text":"IMAS.jl implements the dynamic expressions that ensure consistency and provides an elegant solution to the mismatching-interfaces problem, where preceding models might not furnish all the derived data needed by subsequent models. See under IMAS/src/expressions/.","category":"page"},{"location":"#Plotting","page":"IMAS.jl","title":"Plotting","text":"","category":"section"},{"location":"","page":"IMAS.jl","title":"IMAS.jl","text":"IMAS.jl makes use of Julia's Plots.jl and uses multiple dispatching mechanism to provide contextual (and composable) plotting capabilities throughout the data structure.","category":"page"},{"location":"#Online-documentation","page":"IMAS.jl","title":"Online documentation","text":"","category":"section"},{"location":"","page":"IMAS.jl","title":"IMAS.jl","text":"For more details, see the online documentation.","category":"page"},{"location":"","page":"IMAS.jl","title":"IMAS.jl","text":"(Image: Docs)","category":"page"},{"location":"notice/#IMAS.jl-Notice","page":"Notice","title":"IMAS.jl Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The purpose of this NOTICE file is to provide legal notices and acknowledgments that must be displayed to users in any derivative works or distributions. This file does not alter the terms of the Apache 2.0 license that governs the use and distribution of the IMAS.jl package.","category":"page"},{"location":"notice/#Development-Attribution","page":"Notice","title":"Development Attribution","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"IMAS.jl was originally developed under the FUSE project by the Magnetic Fusion Energy group at General Atomics.","category":"page"},{"location":"notice/#Citation","page":"Notice","title":"Citation","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"If this software contributes to an academic publication, please cite it as follows:","category":"page"},{"location":"notice/","page":"Notice","title":"Notice","text":"@article{meneghini2024fuse,\nauthor = {Meneghini, O. and Slendebroek, T. and Lyons, B.C. and McLaughlin, K. and McClenaghan, J. and Stagner, L. and Harvey, J. and Neiser, T.F. and Ghiozzi, A. and Dose, G. and Guterl, J. and Zalzali, A. and Cote, T. and Shi, N. and Weisberg, D. and Smith, S.P. and Grierson, B.A. and Candy, J.},\ndoi = {10.48550/arXiv.2409.05894},\njournal = {arXiv},\ntitle = {{FUSE (Fusion Synthesis Engine): A Next Generation Framework for Integrated Design of Fusion Pilot Plants}},\nyear = {2024}\n}","category":"page"},{"location":"notice/#Trademark-Notice","page":"Notice","title":"Trademark Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The names \"General Atomics\", and any associated logos or images, are trademarks of General Atomics. Use of these trademarks without prior written consent from General Atomics is strictly prohibited. Users cannot imply endorsement by General Atomics or contributors to the project simply because the project is part of their work.","category":"page"},{"location":"notice/#Copyright","page":"Notice","title":"Copyright","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Copyright (c) 2024 General Atomics","category":"page"},{"location":"notice/#Version","page":"Notice","title":"Version","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Version: v2.1","category":"page"}]
}
